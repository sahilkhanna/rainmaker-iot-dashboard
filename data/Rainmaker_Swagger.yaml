openapi: 3.0.0
info:
  description: This Swagger file provides the details about the RainMaker platform APIs.<br><br>
    There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br>
    The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br>
    For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br>
    When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the "Authorization" HTTP header as the authentication token.<br>
      <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices.
    <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>
  version: 1.0.0-49fdae4_2021-03-02T08:20
  title: API Definitions for RainMaker Backend Service
  termsOfService: http://swagger.io/terms/
  contact:
    email: esp-rainmaker-admin@espressif.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: User
    description: User Creation, Login, Authentication  and Password management
  - name: User Node Association
    description: Associating a node with the user
  - name: Node Parameter Operations
    description: Update the state of the node or get the state of the node
  - name: OTA Service
    description: APIs to upload Firmware images and manage OTA jobs
  - name: Statistical Service
    description: Rainmaker Statistical Service APIs
  - name: IOT Endpoint
    description: API to fetch IOT Endpoint
  - name: Device grouping
    description: APIs for operations on device groups
  - name: Time Series Data
    description: APIs to fetch the Time Series data for the nodes.
  - name: Custom User Data
    description: User specific data management
  - name: Webhook Integration
    description: API to manage the configuration for Webhook integration.
  - name: Event Filter
    description: API to manage event filtering information events related to Integrations, by Admins.
  - name: Event Filter for Users
    description: API to manage event filtering information events related to Integrations, by Users.
  - name: Mobile Platform Application
    description: Manage platform application
  - name: Mobile Platform Endpoint
    description: Manage platform endpoint
  - name: Publish Message
    description: Publish Message
  - name: Custom Mobile Platform Message Template
    description: Custom Mobile Platform Message Template
  - name: Automation Trigger and Actions
    description: APIs for operations on automation trigger and actions

paths:
  /{version}/user:
    post:
      tags:
        - User
      summary: Creates the new user or confirms the user
      description: "This API creates a new user or confirms the user. If the password is specified in the request body, a new user is created and a verification code is sent to user's mail address. If the verification code is sent in the request body, the user is confirmed."
      operationId: usercreation
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateUserRequest'
                - $ref: '#/components/schemas/ConfirmUserRequest'
            examples:
              Create User:
                value:
                  user_name: 'username@domain.com'
                  password: 'password'
              Confirm User:
                value:
                  user_name: 'username@domain.com'
                  verification_code: 'verification_code'
        description: Request body for creating new user or confirming the user
        required: true
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>101001- User name is missing
            <br>101002- Email-id is not in correct format
            <br>101003- Password or verification code is missing
            <br>101004- Password must be atleast 8 characters long. It should contain atleast one uppercase, one lowercase character and a number
            <br>101006- User account already exist
            <br>101007- User name or password is not as per specified policy
            <br>101011- User name already verified
            <br>101012- Verification code is incorrect
            <br>101019- Attempt limit exceeded, please try after some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
            <br>101005- Sending verification code failed
            <br>101008- Creating user failed
            <br>101013- User confirmation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"

    put:
      tags:
        - User
      summary: Updates Name of the user
      description: "This API Sets or updates the name of the user."
      operationId: usernameupdate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNameRequest'
            examples:
              Update User Name:
                value:
                  name: 'new name'
        description: Request body for updating name of the user
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>101001- User name is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "404":
          description: failure<br>Error Codes and Error Description
            <br>101025- User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
              <br>101028- Error occurred while updating user
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
          - AccessToken: []

    get:
      tags:
        - User
      summary: Fetches the details of current user
      description: "This API fetches user_id, user_name, super_admin flag, URL of profile picture and name of current user.
                    <br><br>The <b>super_admin</b> flag is returned only when the user is a super admin, in other cases, it will not be returned in the output.
                    <br>Also the <b>picture_url</b> and <b>name</b> are not returned in the output, if it is not set by the user."
      operationId: getUser
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: custom_data
          in: query
          description: When true, will fetch the custom data of the logged in user containing - <b>user_data</b>, <b>write_once_user_data</b> and <b>admin_controlled_data</b>.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
              examples:
                Super Admin User with MFA enabled:
                  value:
                    user_id: string
                    user_name: string
                    super_admin: true
                    picture_url: string
                    name: string
                    mfa: true
                    phone_number: <+Mobile Number with country code>
                Super Admin User with MFA disabled:
                  value:
                    user_id: string
                    user_name: string
                    super_admin: true
                    picture_url: string
                    name: string
                    mfa: false
                    phone_number: <+Mobile Number with country code>
                Other Users:
                  value:
                    user_id: string
                    user_name: string
                    picture_url: string
                    name: string
                    mfa: false
                    phone_number: <+Mobile Number with country code>
                User with custom_data=true:
                  value:
                    user_id: string
                    user_name: string
                    picture_url: string
                    name: string
                    custom_data:
                      {
                        user_data: {
                        Country: <country>,
                        Language: <language>,
                        Time Zone: UTC,
                        Last Active Date: yyyy-mm-dd,
                        Beta: false
                        },
                        write_once_user_data: {
                        Birthday: yyyy-mm-dd
                        },
                        admin_controlled_data: {
                        Premium membership: true
                        }
                      }
        "500":
          description: failure<br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>101026- Getting user-id from user name failed
            <br>101027- Error occurred while fetching user profile picture and name
            <br>100008- Error in fetching tenant context details
            <br>100035- Failed to convert string to JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - User
      summary: Deletes user account
      description: "This API can be used by end-users to delete his/her account. Here are the details-
        <ul>
        <li> If the 'request' query param is true, user delete request is initiated and verification code is sent to user using email or phone number.
        <li>If 'verification_code' query param is specified, user account is deleted.</ul>"
      operationId: userdeletion
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: request
          in: query
          description: if delete user request is to be initiated, value of request param should be true.
          schema:
            type: boolean
            default: false
        - name: verification_code
          in: query
          description: if delete user request is to be verified and user account is to be deleted, the verification code received by user should be entered as value of verification_code query param.
          schema:
            type: number
            default: <verification_code>
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>101001- User name is missing
            <br>119005- Verification code is incorrect
            <br>119006- User does not exist
            <br>119007- Verification code is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>119001- Error occurred while storing user delete request
            <br>119003- Error occurred while getting user delete request
            <br>119004- Failed to delete user
            <br>119008- Sending verification code failed
            <br>119009- Failed to initiate user delete request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user2:
    post:
      tags:
        - User
      summary: Creates the new user or confirms the user. The user can specify his email address or the mobile number with country code for creating his account.
      description: "This API creates a new user or confirms the user. If the password is specified in the request body, a new user is created and a verification code is sent to user's mail address/phone number. If the verification code is sent in the request body, the user is confirmed."
      operationId: usercreation mobile
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateUserRequest'
                - $ref: '#/components/schemas/ConfirmUserRequest'
            examples:
              Create User:
                value:
                  user_name: 'username@domain.com or <+Mobile Number with country code>'
                  password: 'password'
              Confirm User:
                value:
                  user_name: 'username@domain.com or <+Mobile Number with country code>'
                  verification_code: 'verification_code'
        description: Request body for creating new user or confirming the user
        required: true
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>101001- User name is missing
            <br>101002- Email-id is not in correct format
            <br>101003- Password or verification code is missing
            <br>101004- Password must be atleast 8 characters long. It should contain atleast one uppercase, one lowercase character and a number
            <br>101006- User account already exist
            <br>101007- User name or password is not as per specified policy
            <br>101009- Incorrect user name or password
            <br>101011- User name already verified
            <br>101012- Verification code is incorrect
            <br>101036- Please provide valid phone number
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
            <br>101005- Sending verification code failed
            <br>101008- Creating user failed
            <br>101013- User confirmation failed
            <br>101019- Attempt limit exceeded, please try after some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"

    put:
      tags:
        - User
      summary: Updates Name and Phone number of the user
      description: "This API sets or updates the name or phone number of the user.
                    <br><br> MFA can also be enabled / disabled for superadmins. If MFA is enabled, an SMS with verification code is sent to the superadmin's phone number after initial authentication for successful login.
                    <br><br><b>Note:</b> <ul><li>The verification_code will confirm the current phone_number.<li>At any point there can be just one phone number associated with the user. Adding a new phone number will replace the existing one and require reverification. <li>The MFA settings will reflect from the next login onwards.</ul>"
      operationId: userattributeupdate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
             oneOf:
                - $ref: '#/components/schemas/UpdateNameRequest'
                - $ref: '#/components/schemas/UpdatePhoneNumberRequest'
                - $ref: '#/components/schemas/ConfirmPhoneNumberRequest'
                - $ref: '#/components/schemas/EnableOrDisableMFA'
            examples:
              Update User Name:
                value:
                  name: new name
              Add or update phone number:
                value:
                  phone_number:  + Mobile Number with country code
              Confirm phone number:
                value:
                  verification_code: 'verification_code'
              Enable MFA:
                value:
                  mfa: true
              Disable MFA:
                value:
                  mfa: false
        description: Request body for updating name / phone number of the user
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100002- API Version is not supported
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>100006- Invalid request body
            <br>101001- User name is missing
            <br>101012- Verification code is incorrect
            <br>101019- Attempt limit exceeded, please try after some time
            <br>101045- Error, name, phone number or MFA is missing
            <br>101046- This API is not supported for old user pool
            <br>101047- Error, phone number not added for the user
            <br>101048- Error, phone number is not verified
            <br>101051- Error phone number update and MFA are not supported for users with phone number as the user name
            <br>101052- Error, the phone number is already verified for the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "404":
          description: failure<br>Error Codes and Error Description
            <br>101025- User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
              <br>101028- Error occurred while updating user
              <br>101049- Error occured while verifying phone number
              <br>101050- Error occured while enabling or disabling MFA
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
          - AccessToken: []

  /{version}/login:
    post:
      tags:
        - User
      summary: Handle login or extend session request from the user
      description: "This API will be used by the users to Login to RainMaker or to extend an existing session"
      operationId: login
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UserLoginRequest'
                - $ref: '#/components/schemas/ExtendSessionRequest'
            examples:
              User Login:
                value:
                  user_name: 'username@domain.com'
                  password: 'password'
              Extend Session:
                value:
                  user_name: 'username@domain.com'
                  refreshtoken: 'refreshtoken'
        description: username and password for Login
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LoginSuccessResponse'
                  - $ref: '#/components/schemas/LoginExtendSessionResponse'
              examples:
                User Login:
                  value:
                    status: 'success'
                    description: 'Login successful'
                    idtoken: 'idtoken'
                    accesstoken: 'accesstoken'
                    refreshtoken: 'refreshtoken'
                Extend Session:
                  value:
                    status: 'success'
                    description: 'Login successful'
                    idtoken: 'idtoken'
                    accesstoken: 'accesstoken'
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>101009- Incorrect user name or password
            <br>101015- Email address is not verified
            <br>101016- Login failed
            <br>101017- Refresh token failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
            <br>101019- Attempt limit exceeded, please try after some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
  /{version}/logout:
    post:
      tags:
        - User
      summary: Log out user from the session
      description: "This API will be used by the users to Logout from Rainmaker session"
      operationId: logout
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: logout_all
          in: query
          description: "Using this flag the user can be logged out from all sessions or only current session. The possible values are true and false."
          required: false
          schema:
            type: string
            default: 'false'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100002- API Version is not supported
            <br>101036- Error, Invalid logout_all value specified. [Valid values are true/false]
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"

  /{version}/login2:
    post:
      tags:
        - User
      summary: Handle login or extend session request from the user
      description: "This API will be used by the users to Login to RainMaker or to extend an existing session
                    <br>If MFA is enabled, then an SMS will be sent to the phone number after authentication with password. Then, verifying the code and session will lead to successful login of the user."
      operationId: login2
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UserLoginRequest'
                - $ref: '#/components/schemas/UserLoginMobileRequest'
                - $ref: '#/components/schemas/ExtendSessionRequest'
                - $ref: '#/components/schemas/UserLoginMobileConfirmRequest'
            examples:
              User Login with password:
                value:
                  user_name: 'username@domain.com or +Mobile Number with country code'
                  password: 'password'
              User Login request without password:
                value:
                  user_name: 'username@domain.com or +Mobile Number with country code'
              User Login confirm request without password or User Login with MFA:
                value:
                  user_name: 'username@domain.com or +Mobile Number with country code'
                  verification_code: '<verification_code>'
                  session: 'session token'
              Extend Session:
                value:
                  refreshtoken: 'refreshtoken'
        description: username and password for Login
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LoginSuccessResponse'
                  - $ref: '#/components/schemas/LoginExtendSessionResponse'
                  - $ref: '#/components/schemas/LoginWithoutPassword'
              examples:
                User Login:
                  value:
                    status: 'success'
                    description: 'Login successful'
                    idtoken: 'idtoken'
                    accesstoken: 'accesstoken'
                    refreshtoken: 'refreshtoken'
                User Login Request without password:
                  value:
                    status: 'success'
                    description: 'Login request successful. Verification code sent'
                    session: 'session token'
                Extend Session:
                  value:
                    status: 'success'
                    description: 'Login successful'
                    idtoken: 'idtoken'
                    accesstoken: 'accesstoken'
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>101002- Email-id is not in correct format
            <br>101009- Incorrect user name or password
            <br>101015- Email address is not verified
            <br>101016- Login failed
            <br>101017- Refresh token failed
            <br>101036- Please provide valid phone number
            <br>101039- Session is missing
            <br>101012- Verification code is incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
            <br>101044- Successfully Migrated user to new user pool. Please try to login again
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"

  /{version}/password:
    put:
      tags:
        - User
      summary: Handle password change request from the user
      description: ""
      operationId: password
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
            example:
              password: 'password'
              newpassword: 'newpassowrd'
        description: Password change request parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100007- Either User Id or User Email needs to be provided
            <br>101009- Incorrect user name or password
            <br>101018- New Password is missing
            <br>101019- Attempt limit exceeded, please try after some time
            <br>101020- Change password failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/password2:
    put:
      tags:
        - User
      summary: Handle password change request from the user
      description: "This api handles password change request from the user"
      operationId: password mobile
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
            example:
              password: 'password'
              newpassword: 'newpassowrd'
        description: Password change request parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100007- Either User Id or User Email needs to be provided
            <br>101009- Incorrect user name or password
            <br>101018- New Password is missing
            <br>101019- Attempt limit exceeded, please try after some time
            <br>101020- Change password failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/forgotpassword:
    put:
      tags:
        - User
      summary: Handle forgot password request from the user
      description: ""
      operationId: forgotpassword
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ForgotPasswordRequest'
                - $ref: '#/components/schemas/ForgotPasswordConfirm'
            examples:
              Request Forgot Password:
                value:
                  user_name: 'username@domain.com'
              Confirm Forgot Password:
                value:
                  user_name: 'username@domain.com'
                  password: 'password'
                  verification_code: 'verification_code'

        description: password change request parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>101001- User name is missing
            <br>101019- Attempt limit exceeded, please try after some time
            <br>101030- Verification code is missing
            <br>101031- Forgot password request failed
            <br>101032- Password is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "404":
          description: failure <br>Error Codes and Error Description
            <br>101025- User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"

  /{version}/forgotpassword2:
    put:
      tags:
        - User
      summary: Handle forgot password request from the user
      description: "This api handles forgot password request from the user"
      operationId: forgotpassword mobile
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ForgotPasswordRequest'
                - $ref: '#/components/schemas/ForgotPasswordConfirm'
            examples:
              Request Forgot Password:
                value:
                  user_name: 'username@domain.com or +Mobile Number with country code'
              Confirm Forgot Password:
                value:
                  user_name: 'username@domain.com or +Mobile Number with country code'
                  password: 'password'
                  verification_code: 'verification_code'

        description: password change request parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>101001- User name is missing
            <br>101002- Email-id is not in correct format
            <br>101019- Attempt limit exceeded, please try after some time
            <br>101030- Verification code is missing
            <br>101031- Forgot password request failed
            <br>101032- Password is missing
            <br>101036- Please provide valid phone number
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "404":
          description: failure <br>Error Codes and Error Description
            <br>101025- User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"

  /{version}/user/custom_data:
    get:
      tags:
        - Custom User Data
      summary: Get the Custom user data
      description: "Fetches the custom user data of the logged-in user. Three types of custom data is fetched
                    <ul>
                    <li><b>user_data</b> - controlled by users
                    <li><b>write_once_user_data</b> - controlled by users. The data written once, can not be modified later.
                    <li><b>admin_controlled_data</b> - controlled by super admin Users.
                    </ul>
                    "
      operationId: getUserData
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UserDataResponse'
              examples:
                Get custom user data:
                  $ref: "#/components/examples/UserDataResponseExample"
                Get custom user data - data doesn't exist:
                  value:
                    {
                    "user_data": {},
                    "write_once_user_data": {},
                    "admin_controlled_data":{}
                    }
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100002- API Version is not supported
            <br>100006- Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeMappingAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100008- Error in fetching tenant context details
            <br>100035- Failed to convert string to JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []

    put:
      tags:
        - Custom User Data
      summary: Store the custom User data
      description: "To store the custom user data of the logged-in user. Two types of data can be controlled:
                    <ul>
                    <li><b>user_data</b> - can be created, modified, read, deleted and cleared
                    <li><b>write_once_user_data</b> - can be created, read and entirely cleared but can't be modified or deleted individually
                    </ul>
                    <b>Operations on Data:</b>
                    <ul>
                    <li>The data can be deleted by putting data: <b>null</b>.
                    <li>If the key is already present, then the value will be replaced. Arrays will also be replaced entirely.
                    <li>If the key is not present, then the value will be added.
                    <li>If the value is <b>null</b>, then the key-value will be deleted.
                    </ul><b>Note</b>: The JSON size should not exceed 399 KB."
      operationId: storeUserData
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UserDataRequestResponse'
            examples:
              Set custom user data:
                value:
                  {
                    user_data: {
                    Country: <country>,
                    Time Zone: UTC,
                    Last Active Date: yyyy-mm-dd,
                    Beta: false
                    },
                    write_once_user_data: {
                    Birthday: yyyy-mm-dd,
                    }
                  }
              Add new custom user data key:
                value:
                  {
                    "user_data": {
                      Language: <language>,
                    },
                    "write_once_user_data": {
                      User created timestamp: "2020-04-22 11:52:00"
                    }
                  }
              Modify an existing user data key:
                value:
                  {
                    "user_data": {
                      Beta: true,
                    }
                  }
              Remove an existing user data key:
                value:
                  {
                    "user_data": {
                      Time Zone: null,
                    }
                  }
              Delete entire user data:
                value:
                  {
                    "user_data": null
                  }
              Delete entire write once user data:
                value:
                  {
                    "write_once_user_data": null
                  }
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UserDataRequestResponse'
              examples:
                Updated custom user data:
                  value:
                    {
                      "user_data": {
                        "Country": "<country>",
                        "Last Active Date": "yyyy-mm-dd",
                        "Beta": true,
                        "Language": "<language>"
                      },
                      "write_once_user_data": {
                        User created timestamp: "2020-04-22 11:52:00"
                      }
                    }
                Deleted user data and write once user data:
                  value:
                    {
                      "user_data": {},
                      "write_once_user_data": {}
                    }
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100002- API Version is not supported
            <br>100006- Invalid request body
            <br>100036- Error, input size is too large
            <br>125003- Error occurred while parsing the data. Please check for JSON validity
            <br>125005- Error, write once user data can only be set once
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeMappingAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100008- Error in fetching tenant context details
            <br>100035- Failed to convert string to JSON
            <br>125001- Error occurred while storing user data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/nodes:
    get:
      tags:
        - User Node Association
      summary: Get the nodes associated with the user
      description: ""
      operationId: getUserNodes
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node Id of node to get the node details
          required: false
          schema:
            type: string
            example: node_id1
        - name: node_details
          in: query
          description: optional flag **(true/false)**, to indicate if the node details are required in the response
          required: false
          schema:
            type: boolean
            default: false
        - name: status
          in: query
          description: optional flag **(true/false)**, to indicate if the node details should contain status in the response or not.
          required: false
          schema:
            type: boolean
            default: true
        - name: config
          in: query
          description: optional flag **(true/false)**, to indicate if the node details should contain config in the response or not.
          required: false
          schema:
            type: boolean
            default: true
        - name: params
          in: query
          description: optional flag **(true/false)**, to indicate if the node details should contain params in the response or not.
          required: false
          schema:
            type: boolean
            default: true
        - name: start_id
          in: query
          description: use next_id from the response as start_id to fetch the next set of records
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: number of nodes to fetch
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNodesList"
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100007- Either User Id or User Email needs to be provided
            <br>100010- Node does not belong to user
            <br>100012- Invalid Request
            <br>103007- Fetching node to User mapping failed
            <br>103014- Error in checking if node belongs to user
            <br>103015- Error in getting total node count for user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeMappingAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/user/nodes/config:
    get:
      tags:
        - User Node Association
      summary: Get the configuration for the node
      description: ""
      operationId: getUserNodeConfiguration
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeConfiguration"
        "400":
          description: failure<br>Error Codes And Error Description
            <br>100002- API Version is not supported
            <br>100007- Either User Id or User Email needs to be provided
            <br>100009- Node Id is missing
            <br>100010- Node does not belong to user
            <br>100011- Invalid JSON received
            <br>103001- Fetching nodes failed
            <br>103002- Node config not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeMappingAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/user/nodes/mapping:
    put:
      tags:
        - User Node Association
      summary: Add or Remove the User Node mapping
      description: ""
      operationId: addRemoveUserNodeMapping
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRemoveUserNodeMappingRequest'
            examples:
              Add User Node Mapping:
                value:
                  node_id: 'node_id'
                  secret_key: 'secret_key'
                  operation: 'add'
              Remove User Node Mapping:
                value:
                  node_id: 'node_id'
                  operation: 'remove'
              Add User Node Mapping with Location:
                value:
                  node_id: 'node_id'
                  secret_key: 'secret_key'
                  operation: 'add'
                  location: {
                    city: 'NYC',
                    state: 'New York',
	                  country: 'United States',
                    postal_code: '211',
                    latitude: 40.7128,
                    longitude: -73.984016,
                    location_tag: '<text>'
                  }
        description: Add or Remove User Node Mapping Request Parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AddUserNodeMappingResponse'
                  - $ref: '#/components/schemas/APISuccessResponse'
              examples:
                Add User Node Mapping:
                  value:
                    status: 'success'
                    description: 'Success description'
                    request_id: 'request_id'
                Remove User Node Mapping:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100002- API Version is not supported
            <br>100006- Invalid request body
            <br>100007- Either User Id or User Email needs to be provided
            <br>100009- Node Id is missing
            <br>100010- Node does not belong to user
            <br>103003- Invalid operation specified.[Valid operation values are add/remove]
            <br>103004- Secret key for mapping user to node mapping is blank
            <br>103005- NodeId is too long
            <br>103006- Secret key is too long
            <br>103007- Fetching node to User mapping failed
            <br>103008- Adding user to nodes mapping failed
            <br>103009- Error occurred while checking if node belongs to requesting user
            <br>103010- Adding user to nodes mapping request failed
            <br>103011- User node mapping request has timed out
            <br>103012- Removing user to node mapping failed
            <br>103013- User to node mapping does not exist
            <br>103019- Removing node group mapping failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeMappingAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - User Node Association
      summary: Get the status of User Node mapping request
      description: ""
      operationId: getUserNodeMappingRequestStatus
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: request_id
          in: query
          description: request Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserNodeMappingRequestStatus"
        "400":
          description: failure<br>Error Codes and Description
            <br>100007- Either User Id or User Email needs to be provided
            <br>100012- Invalid Request
            <br>103016- RequestId is missing
            <br>103017- Fetching node to User mapping request failed
            <br>103018- User node mapping request not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeMappingAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/user/nodes/sharing:
    put:
      tags:
        - User Node Association
      summary: This API creates the sharing of Nodes between users.
      description: "This API allows
                    <ol>
                    <li>Primary users to share the nodes with other users either with primary user role or secondary. User Name of the requested user and nodes are mandatory parameters. Primary flag for adding user with primary role is an optional parameter.Metadata is an optional parameter, used to store an additional info about node sharing request.</li>
                    <li>Requested user can accept or decline the request for node sharing sent by the primary users.
                    Here accept and request_id are mandatory parameters</li>
                    </ol>"
      operationId: addUserNodeSharing
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AddRemoveUserNodeSharingRequest'
                - $ref: '#/components/schemas/AcceptOrDeclineNodeSharingRequest'
            examples:
              Add User Node Sharing:
                value:
                  nodes: ["node_id1"]
                  user_name: 'username@domain.com'
                  primary: true
                  metadata: { "devices": [
                    {
                      "name": "AC Switch", "type": "esp.device.switch"
                    }]
                    }

              Accept or Decline request:
                value:
                  accept: true
                  request_id: 'request_id'
        description: Add User Node Sharing / Accept or Decline Sharing Request Parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/APISuccessResponseWithRequestId'
              examples:
                Add User Node Sharing:
                  value:
                    status: 'success'
                    description: 'Success description'
                    request_id: 'request_id'
                Accept or Decline Sharing request:
                  value:
                    status: 'success'
                    description: 'Success description'

        "400":
          description: failure<br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100007- Either User Id or User Email needs to be provided
            <br>107001- Please specify at least one node
            <br>107002- User name is missing
            <br>107003- Self node sharing operations [add/remove] are not allowed.
            <br>107005- Some of the nodes in the Node sharing request does not belong to the user
            <br>107007- User does not exist for sharing
            <br>107008- NodeId is too long
            <br>107011- User to node mapping does not exist
            <br>107017- Specify confirm_sharing or accept parameter correctly. true/false
            <br>107021- Error RequestId is missing
            <br>107022- Node list too long. It can have maximum of 100 nodes.
            <br>107023- Error getting request. Either given request ID is invalid or has already been accepted or declined.
            <br>107024- Error some nodes are missing.
            <br>107027- Error, User should be primary owner of all nodes in the request
            <br>107029- Error, One of the nodes already have mapping with different role           
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: "failure<br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>107004- Error occurred while checking if node belongs to requesting user
            <br>107006- Error occurred while checking user exists
            <br>107010- Adding user to nodes mapping failed
            <br>103010- Adding user to nodes mapping request failed
            <br>107018- Error occurred while updating the request status
            <br>107020- Error getting Request
            "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - User Node Association
      summary: This API removes the sharing of Nodes between the users.
      description: "This API allows the primary users to remove the sharing of nodes with other users."
      operationId: RemoveUserNodeSharing
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: nodes
          in: query
          description: Comma separated nodeids (Example nodes=nodeid1,nodeid2)
          required: true
          schema:
            type: string
        - name: user_name
          in: query
          description: User Name
          required: true
          schema:
            type: string
            example: username@domain.com
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/APISuccessResponse'
              examples:
                Remove User Node Sharing:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description-
            <br>100007- Either User Id or User Email needs to be provided
            <br>107001- Please specify at least one node
            <br>107002- User name is missing
            <br>107003- Self node sharing operations[add/remove] are not allowed
            <br>107007- User does not exist for sharing
            <br>107022- Node list too long. It can have maximum of 100 nodes.
            <br>107024- Error some nodes are missing.
            <br>107027- Error. User should be primary owner of all nodes in the request
            <br>107028- Error, cannot remove nodes that were shared via groups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description-
            <br>107004- Error occurred while checking if node belongs to requesting user
            <br>107006- Error occurred while checking user exists
            <br>107009- Removing user to node mapping failed
            <br>107011- User to node mapping does not exist
            <br>107015- Removing node group mapping failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - User Node Association
      summary:  This API fetches the sharing details for the nodes the current user is associated with.
      description: "This API is used to fetch the Node sharing details. Here are the details -
                    <ul><li>When no parameters are passed it returns the sharing details of all the nodes that this user is associated with (Primary or Secondary)</li>
                    <li>When node_id is passed, it returns the sharing details of that node. The requesting user can be Primary or Secondary.</li>
                    <li>If this API is called by the secondary user, the list of other secondary users this node is associated with, is not returned but the sources from where this node was shared will be returned.</li>
                    <ul><li>When <b>NODE</b> is present in the sources array it represents that it was shared via Node sharing</li>
                    <li>Else it was shared via Group sharing and the list will have group Ids</li></ul>
                    </ul>"
      operationId: getUserNodeSharing
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node Id of node to get the sharing details
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserNodeSharingResponse"
              examples:
                For Secondary users:
                  value:
                        node_sharing:
                          - node_id: string
                            users:
                                primary:
                                - primary_user@domain.com
                                secondary:
                                - secondary_user@domain.com
                            sources:
                              - NODE
                              - <group_id>
                For Primary users:
                  value:
                        node_sharing:
                          - node_id: string
                            users:
                                primary:
                                - primary_user@domain.com
                                secondary:
                                - secondary_user@domain.com
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100007- Either User Id or User Email needs to be provided
            <br>100010- Node does not belong to user
            <br>107013- User is not associated with any node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description
            <br>107004- Error occurred while checking if node belongs to requesting user
            <br>107012- Error occurred while fetching shared users of node
            <br>107014- Fetching node to User mapping failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/nodes/sharing/requests:
    get:
      tags:
        - User Node Association
      summary: This API is used to get the sharing requests raised between users.
      description: "This API allows the primary and secondary users to get the sharing requests.
                    <ol>
                    <li>To get the requests raised by primary user, with primary_user flag set as true</li>
                    <li>To get the requests received by secondary user</li>
                    <li>To get the details of a request by request_id</li>
                    </ol>
                    To support pagination start_request_id, start_user_name, num_records are added to the API."
      operationId: getUserNodeSharingRequest
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: request_id
          in: query
          description: request Id
          required: false
          schema:
            type: string
        - name: primary_user
          in: query
          description: This is a boolean flag, which is used to denote whether to get the requests raised by Primary user(true) or received by secondary users (false). Default value for this flag is false.
          required: false
          schema:
            type: string
        - name: start_request_id
          in: query
          description: used in pagination
          required: false
          schema:
            type: string
        - name: start_user_name
          in: query
          description: used in pagination along with start_request_id
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: used to specify the no of records that must be returned. Default value is 10. The valid values are in the range of 1 to 10. If invalid value is given, default value is used.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/GetNodeSharingRequestResponse'
              examples:
                Get User Node Sharing Response:
                  value:
                    sharing_requests:
                      - request_id: "<request_id>"
                        request_status: "declined/pending"
                        request_timestamp: 1612182919
                        node_ids:
                            - "thing1"
                            - "thing2"
                        user_name: secondary_user@domain.com
                        primary_user_name: primary_user@domain.com
                        metadata: { "devices": [
                          {
                            "name": "AC Switch", "type": "esp.device.switch"
                          }]
                          }
                        next_request_id: next_request_id
                        next_user_name: next_user_name
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100007- Either User Id or User Email needs to be provided
            <br>107019- Specify primary_user parameter correctly. [Valid options are primary_user=true or primary_user=false or don't specify it. Default is false]
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>107020- Error getting Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - User Node Association
      summary: This API removes the sharing request of Nodes between the users.
      description: "This API allows the primary users to remove the sharing request of nodes with other users."
      operationId: removeUserNodeSharingRequest
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: request_id
          in: query
          description: Request Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
              examples:
                Remove User Node Sharing Request:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description-
            <br>100007- Either User Id or User Email needs to be provided
            <br>107021- Error RequestId is missing
            <br>107025- Error occurred while removing request as it was declined by the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "404":
          description: failure<br>Error Codes and Error Description-
            <br>107026- Node sharing request not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description-
            <br>100001- Error in fetching user details
            <br>107018- Error occurred while updating the request status
            <br>107020- Error getting Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []

    put:
      tags:
        - User Node Association
      summary: This API creates the sharing of Nodes between users.
      description: "This API allows
                    <ol>
                    <li>Primary users to share the nodes with other users either with primary user role or secondary. User Name of the requested user and nodes are mandatory parameters. Primary flag for adding user with primary role is an optional parameter.Metadata is an optional parameter, used to store additional info about node sharing request.</li>
                    <li>Requested user can accept or decline the request for node sharing sent by the primary users.
                    Here accept and request_id are mandatory parameters</li>
                    </ol>"
      operationId: addUserNodeSharingRequests
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
               - $ref: '#/components/schemas/AddRemoveUserNodeSharingRequest'
               - $ref: '#/components/schemas/AcceptOrDeclineNodeSharingRequest'
            examples:
              Add User Node Sharing:
                value:
                  nodes: ["node_id1"]
                  user_name: 'username@domain.com'
                  primary: true
                  metadata: {"devices": [
                    {
                      "name": "AC Switch", "type": "esp.device.switch"
                    }]
                  }

              Accept or Decline request:
                value:
                  accept: true
                  request_id: 'request_id'
        description: Add User Node Sharing / Accept or Decline Sharing Request Parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/APISuccessResponseWithRequestId'
              examples:
                Add User Node Sharing:
                  value:
                    status: 'success'
                    description: 'Success description'
                    request_id: 'request_id'
                Accept or Decline Sharing request:
                  value:
                    status: 'success'
                    description: 'Success description'

        "400":
          description: failure<br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100007- Either User Id or User Email needs to be provided
            <br>107001- Please specify at least one node
            <br>107002- User name is missing
            <br>107003- Self node sharing operations [add/remove] are not allowed.
            <br>107005- Some of the nodes in the Node sharing request does not belong to the user
            <br>107007- User does not exist for sharing
            <br>107008- NodeId is too long
            <br>107011- User to node mapping does not exist
            <br>107017- Specify confirm_sharing or accept parameter correctly. true/false
            <br>107021- Error RequestId is missing
            <br>107022- Node list too long. It can have maximum of 100 nodes.
            <br>107023- Error getting request. Either given request ID is invalid or has already been accepted or declined.
            <br>107024- Error some nodes are missing.
            <br>107027- Error. User should be primary owner of all nodes in the request
            <br>107029- Error, One of the nodes already have mapping with different role    
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: "failure<br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>107004- Error occurred while checking if node belongs to requesting user
            <br>107006- Error occurred while checking user exists
            <br>107010- Adding user to nodes mapping failed
            <br>103010- Adding user to nodes mapping request failed
            <br>107018- Error occurred while updating the request status
            <br>107020- Error getting Request
            "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []

  /mqtt_host:
    get:
      tags:
        - IOT Endpoint
      summary: Fetch the IOT endpoint
      description: "This API will Get the IOT endpoint"
      operationId: getIOTEndPoint
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchMqttEndpointResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>109001- Failed to fetch iot endpoint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MqttEndpointAPIFailureResponse"

  /{version}/user/nodes/params:
    put:
      tags:
        - Node Parameter Operations
      summary: Update the Node Parameter
      description: "This API will update the state of the device"
      operationId: updatenodestate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
                oneOf:
                  - $ref: "#/components/schemas/SetParamsRequestBody"
                  - $ref: "#/components/schemas/SetMultiNodeParamsRequestsBody"
            examples:
                  Single node set params - node_id in request body:
                    $ref: "#/components/examples/SingleNodesSetParamsRequestBodyExample"
                  Single node set params - node_id as a query parameter:
                    $ref: "#/components/examples/SingleNodesSetParamsRequestBodyWithNodeIdAsQueryParamExample"
                  Multiple node set params:
                    $ref: "#/components/examples/MultiNodesSetParamsRequestBodyExample"
        description: Request body for updating Node Parameter
        required: true
      responses:
        "200":
          description: success if node_id provided as a query parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "207":
          description: multi-status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiNodeSetParamsAPIResponseWithNodeId'
        "400":
          description: failure<br>Error codes and Error Description
            <br>100002- API Version is not supported
            <br>100009- Node Id is missing
            <br>100010- Node does not belong to user
            <br>100012- Invalid Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeStateAPIFailureResponse"
        "500":
          description: failure<br>Error codes and Error Description
            <br>102002- Updating node parameter failed
            <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/NodeStateAPIFailureResponse"
      security:
        - AccessToken: []

    get:
      tags:
        - Node Parameter Operations
      summary: Get the Node parameter
      description: "This API will Get the state of the device"
      operationId: getnodestate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetParamsRequestBody"
        "400":
          description: failure<br>Error codes and Error Description
            <br>100002- API Version is not supported
            <br>100009- Node Id is missing
            <br>100010- Node does not belong to user
            <br>102003- Getting node status failed
            <br>102004- Node does not exist
            <br>102006- Device reported state not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeStateAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/NodeStateAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/user/nodes/status:
    get:
      tags:
        - User Node Association
      summary: Get the online or offline status for the node
      description: ""
      operationId: getNodeStatus
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeConnectivity"
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100002- API Version is not supported
            <br>100009- Node Id is missing
            <br>102005- Getting node parameter failed
            <br>103020- Node does not belong to user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeStateAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/NodeStateAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/admin/nodes:
    get:
      tags:
        - User Node Association
      summary: Get the nodes claimed by the Admin user
      description: "This API is to get the node details of nodes claimed by the admin:
                    <li>When no parameter is passed list of all the nodes and nodeInfo are returned.</li>
                    <li>When type is passed, list of all the nodes and nodeInfo which are of that type are returned.</li>
                    <li>When model & type is passed, list of all the nodes and nodeInfo which are of that model & type are returned.</li>
                    <ul><li><b>Note: type is a required parameter if model is provided.</b></li></ul>
                    <li>When model, type & fw_version is passed, list of all the nodes and nodeInfo which are of that model, type & fw_version are returned.</li>
                    <ul><li><b>Note: model & type is a required parameter if fw_version is provided.</b></li></ul>
                    <li>When node_id is passed the details of that node (NodeInfo) is returned</li>
                    To support pagination num_records and start_id are present
                    "
      operationId: getAdminUserNodes
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: num_records
          in: query
          description: Used for pagination, number of records to be fetched
          required: false
          schema:
            type: string
        - name: start_id
          in: query
          description: Used for pagination, Start Id of the record to be fetched
          required: false
          schema:
            type: string
        - name: node_id
          in: query
          description: Used to fetch details of particular node
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Used to fetch list of nodes based on type.
          required: false
          example: led
          schema:
            type: string
        - name: model
          in: query
          description: Used to fetch list of nodes based on model and type.
          required: false
          example: "2021"
          schema:
            type: string
        - name: fw_version
          in: query
          description: Used to fetch list of nodes based on model, type & fw_version.
          required: false
          example: "1.0"
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/GetAdminNodesList"
                - $ref: "#/components/schemas/NodeInfo"
              examples:
                Node_List:
                  value:
                    nodes: ["thing", "thing2"]
                    node_info:
                    - node_id: thing
                      name: "Light"
                      fw_version: "1.0"
                      type: "Lightbulb"
                      model: "led_light"
                      registration_timestamp: "2020-04-22 11:52:00"
                      status:
                        connectivity:
                          connected: true
                          timestamp: 123322222
                    - node_id: thing2
                      name: "Light"
                      fw_version: "1.0"
                      type: "Lightbulb"
                      model: "led_light"
                      registration_timestamp: "2020-04-22 11:52:00"
                      status:
                        connectivity:
                          connected: true
                          timestamp: 123322222
                    next_id: "thing2"
                    total: 123
                    quota: 5
                When Node_id is passed:
                  value:
                    node_id: thing1
                    name: "Light"
                    fw_version: "1.0"
                    type: "Lightbulb"
                    model: "led_light"
                    registration_timestamp: "2020-04-22 11:52:00"
                    status:
                      connectivity:
                        connected: true
                        timestamp: 123322222
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100014- Getting node details failed
            <br>100011- Invalid JSON received
            <br>105021- Please claim nodes to start using the OTA
            <br>105022- Error occurred while fetching claimed nodes for user
            <br>105023- Failed to get quota info for user
            <br>105034- Error, if model is provided then type also needs to be provided
            <br>105035- Error, if firmware version is provided then type and model also needs to be provided
        "404":
          description: failure <br>Error Codes and Error Description
            <br>100015- Nodes do not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - User Node Association
      summary: Activate or Deactivate the Node
      description: "This api is used to activate or deactivate the Node"
      operationId: updateNodeCertificateStatus
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: activate
          in: query
          description: Used for specifying either to activate the node or deactivate the node
          required: true
          schema:
            type: boolean
        - name: node_id
          in: query
          description: Used to specify nodeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>105018- NodeId is missing
            <br>105025- Please specify valid operation to be performed [activate=true or activate=false]
            <br>100014- Getting node details failed
            <br>105026- Error occurred while fetching node details
            <br>105027- Error occurred while updating node certificate status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "404":
          description: failure <br>Error Codes and Error Description
            <br>100015- Nodes do not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/admin/otaimage:
    post:
      tags:
        - OTA Service
      summary: This API is used for uploading a new Firmware image
      description: "This API uploads the new Firmware image to Rainmaker Cloud."
      operationId: adminuploadotaimage
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtaImageCreateRequest'
            examples:
              Upload OTA Image:
                value:
                  fw_version: '1.0'
                  image_name: 'Alexa echo 2'
                  model: 'echo 2'
                  type: 'alexa'
                  base64_fwimage: 'base 64 encoded image string'
        description: Request body for uploading new firmware image. List of optional parameters
                     <ul>
                     <li>fw_version</li>
                     <li>model</li>
                     <li>type</li>
                     </ul>
                     <h3>These above parameters will be fetched from base64_fwimage when not passed in request body.<br>
                     If absent in both places then error will be returned.</h3>
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtaImageCreateResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>104001- Base64 firmware image is missing
            <br>104002- Image Name is missing
            <br>104003- Error occurred while parsing image
            <br>104004- Firmware version is missing
            <br>104005- Model is missing
            <br>104006- Error occurred while fetching OTA image
            <br>104007- Error occurred while fetching OTA image associated with another otajob
            <br>104008- OTA Image is associated with another OTA job, can't update
            <br>104009- Error occurred while generating OTA image id
            <br>104010- OTA Image size should be smaller than 5 mb
            <br>104011- Invalid base64 firmware image
            <br>104012- The OTA Service is being set-up for your account. Please try again after some time
            <br>104013- Error occurred while uploading OTA image
            <br>104014- Error occurred while saving OTA image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/OTAImageAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - OTA Service
      summary: Get the details about OTA images for the user
      description: "This API gives the details about the OTA image. If the ota_image_id or the ota_image_name is not specified, all the images for the user are returned.
                    <li>If contains flag is set to true, pattern search will be applied on image_name specified.</li>"
      operationId: getOTAImage
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_image_id
          in: query
          description: OTA Image Id
          required: false
          schema:
            type: string
        - name: image_name
          in: query
          description: OTA Image Name
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: OTA Image Type
          required: false
          schema:
            type: string
        - name: model
          in: query
          description: OTA Image Model
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: Used for pagination, number of records to be fetched
          required: false
          schema:
            type: string
        - name: start_id
          in: query
          description: Used for pagination, Start Id of the record to be fetched
          required: false
          schema:
            type: string
        - name: contains
          in: query
          description: For pattern search on image_name
          required: false
          schema:
            type: boolean
            default: false
        - name: archived
          in: query
          description: If set to true, will return only archived OTA images
          required: false
          schema:
            type: boolean
            default: false
        - name: all
          in: query
          description: If set to true, will return all images irrespective of archived status
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/GetOTAImageResponse"
                  - $ref: "#/components/schemas/OTAImage"
              examples:
                GetOTAImageList:
                    $ref: "#/components/examples/GetOTAImageArrayResponse"
                GetOTAImageInfoByImageId:
                    $ref: "#/components/examples/GetOTAImageResponseByImageId"
                GetOTAImageInfoByImageNameAndContainsPattern:
                    $ref: "#/components/examples/GetOTAImageArrayResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>104006- Error occurred while fetching OTA image
            <br>104015- OTA image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/OTAImageAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - OTA Service
      summary: Delete the  OTA Image for the user
      description: "This API deletes the OTA image for the user, if it is not used in any of the OTA jobs. If the OTA image is used in any of the OTA jobs, an error is returned."
      operationId: deleteOTAImage
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_image_id
          in: query
          description: OTA Image Id
          required: true
          schema:
            type: string
        - name: force_delete
          in: query
          description: Delete the OTA Image forcefully (Even if it is associated with any cancelled OTA Job)
          required: false
          schema:
            type: string
            default: 'false'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>104006- Error occurred while fetching OTA image
            <br>104007- Error occurred while fetching OTA image associated with another otajob
            <br>104015- OTA image not found
            <br>104016- OTA Image is associated with OTA job, can't be deleted
            <br>104017- Error in deleting OTA image
            <br>104018- OTA Image Id is missing
            <br>104020- OTA Image is associated with an active OTA job, can't be deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/OTAImageAPIFailureResponse"

      security:
        - AccessToken: []

    put:
      tags:
        - OTA Service
      summary: Archive/Unarchive an OTA image
      description: "This API archives/unarchives the OTA image for the user"
      operationId: archiveOrUnarchiveOtaImage
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_image_id
          in: query
          description: OTA image id
          required: true
          schema:
            type: string
        - name: archive
          in: query
          description: Archives the image when true and unarchives the image when false
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>104018- OTA Image Id is missing
            <br>104022- Archive flag missing
            <br>104023- OTA Image is already archived
            <br>104024- OTA Image is already unarchived
            <br>104026- Invalid archive flag. Enter one of [true, false]
            <br>104015- OTA image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>104025- An error occurred while updating archived status
            <br>104006- Error occurred while fetching OTA image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/otajob:
    post:
      tags:
        - OTA Service
      summary: This API creates a new OTA job
      description: "This API creates a new OTA job. The user needs to specify the OTA Image ID, Job name, nodes and/or groups. Currently, the OTA update can be pushed for upto 100 nodes and/or 10 groups of nodes or all claimed nodes (Group:FFFF-FFFF) in a single request. For pushing the OTA Update to a group of nodes, the **groups** parameter must be filled with a list of group IDs. For pushing the OTA update to all the claimed nodes, user needs to specify the group_id as **FFFF-FFFF**
                <br><b>NOTE: The OTA image must have unarchived status.</b>"
      operationId: createotajob
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: force_push
          in: query
          description: Force push OTA image
          required: false
          schema:
            type: string
            default: 'false'
        - name: user_approval
          in: query
          description: If true, OTA can be pushed to node by end users
          required: false
          schema:
            type: string
            default: 'false'
        - name: notify
          in: query
          description: Indicates if end user should be notified about OTA job
          required: false
          schema:
            type: string
            default: 'false'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtaJobCreateRequest'
            examples:
              Create a new OTA job Upload:
                value:
                  ota_job_name: 'OTA Job for Alexa devices, FW version 1.0 '
                  groups: ["FFFF-FFFF"]
                  nodes: ["node_id1", "node_id2"]
                  ota_image_id: "Image Id which needs to be pushed"
                  metadata: {"download_window":{"start":0, "end":120}, "validity":{"start":1639732410, "end":1639991610}}
        description: Request body for creating a new OTA Job
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtaJobCreateResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>100006- Invalid request body
            <br>100013- Failed to generate JSON response
            <br>104006- Error occurred while fetching OTA image
            <br>104018- OTA Image Id is missing
            <br>104015- OTA image not found
            <br>105001- OTA job name is missing
            <br>105002- OTA nodeId or groupId is missing
            <br>105003- Currently only 1 node or group is supported in nodes or groups
            <br>105004- Error occurred while fetching OTA job info
            <br>105005- OTA job name already exists
            <br>105006- Failed to save OTA job details
            <br>105007- Failed to save OTA node status
            <br>105008- Failed to save latest OTA node status
            <br>105009- The OTA Service is being set-up for your account. Please try again after some time
            <br>105010- Error occurred while creating pre-signed url
            <br>105011- Error occurred while publishing to topic
            <br>105036- Error as the OTA image is archived
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
        "431":
          description: failure
              <br>Error Codes and Error Description
            <br>105028- Error occurred due to too many groups in the request
            <br>105029- Error occurred due to too many nodes in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
              <br>105030- Error occurred while submitting job
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - OTA Service
      summary: Get the details about OTA jobs for the user
      description: "This API provides the details about the OTA job created by the user.
                    <ol><li>If the user specifies <b>ota_job_id</b> or <b>ota_job_name</b>, then the details about the specific job are returned. In case of ota_job_name all jobs which contain the pattern are returned.</li>
                    <li>If <b>ota_image_id</b> is provided then the latest ota job that is not archived by the user with that image id will be returned and if <b>archived</b> is set as true then latest ota job that is archived by the user with that image id will be returned </li>
                    <li>If <b>archived</b> is provided as true, then the all ota job that are archived by the user will be returned</li>
                    <li>If <b>all</b> is provided as true, then all the OTA jobs created by the user are returned</li>
                    <li>else the details about all the OTA jobs that have been created by the user and are not archived will be returned.</li></ol>"
      operationId: getOTAJob
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_job_id
          in: query
          description: OTA Job Id
          required: false
          schema:
            type: string
        - name: ota_job_name
          in: query
          description: OTA Job name - Pattern
          required: false
          schema:
            type: string
        - name: ota_image_id
          in: query
          description: OTA Image Id
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: Used for pagination, number of records to be fetched
          required: false
          schema:
            type: string
        - name: start_id
          in: query
          description: Used for pagination, Start Id of the record to be fetched
          required: false
          schema:
            type: string
        - name: archived
          in: query
          description: Flag to get archived ota jobs. [Valid values are true/false]
          required: false
          schema:
            type: boolean
            default: false
        - name: all
          in: query
          description: Flag to get all the ota jobs irrespective whether a job is archived or not. [Valid values are true/false]
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/GetOTAJobResponse"
                - $ref: "#/components/schemas/OTAJob"
              examples:
                Default Output:
                  $ref: "#/components/examples/GetOTAJobs"
                When queried with ota_job_id or ota_image_id :
                  $ref: "#/components/examples/GetOTAJob"
                When queried with ota_job_name pattern:
                  $ref: "#/components/examples/GetOTAJobs"
                When queried with archived or all as true :
                  $ref: "#/components/examples/GetArchivedOTAJobs"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>105004- Error occurred while fetching OTA job info
            <br>105012- OTA job not found
            <br>105013- Error occurred while fetching node OTA status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - OTA Service
      summary: Cancel/Archive an OTA job
      description: "This API cancels/archives OTA job. The user needs to specify the OTA Job Id and archive flag in request body.
                    <br><b>NOTE: An OTA Job can be archived only when it is in canceled state.</b>"
      operationId: cancelOrArchiveOtaJob
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtaJobCancelRequest'
            examples:
              Cancel OTA job:
                value:
                  ota_job_id: 'ota_job_id'
              Archive OTA job:
                value:
                  ota_job_id: 'ota_job_id'
                  archive: true
        description: Request body for cancelling/archiving OTA Job
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTACancelJob"
              examples:
                Cancel OTA Job:
                  value:
                    ota_job_id: string
                    ota_job_name: string
                    ota_image_id: string
                    completed_count: 0
                    total_count: 1
                    triggered_timestamp: string
                    cancelled_timestamp: string
                    groups:
                      - FFFF-FFFF
                    status: cancelled
                Archive OTA Job:
                  value:
                    ota_job_id: string
                    ota_job_name: string
                    ota_image_id: string
                    completed_count: 0
                    total_count: 1
                    triggered_timestamp: string
                    cancelled_timestamp: string
                    groups:
                      - FFFF-FFFF
                    status: cancelled
                    archived: true
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>100006- Invalid request body
            <br>105014- OTA Job Id is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
        "404":
          description: failure <br>Error Codes and Error Description
            <br>105015- Either Job is cancelled or Job does not exists
            <br>105032- Either Job is not cancelled or Job does not exists or is already archived
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>105004- Error occurred while fetching OTA job info
            <br>105016- Error occurred while cancelling job
            <br>105033- Error occurred while archiving the job
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/otajob/status:
    get:
      tags:
        - OTA Service
      summary: This API provides status of the the OTA job
      description: "This API provides the status of the OTA job. It provides the details about the OTA job and the latest OTA status for the nodes. "
      operationId: getOTAJobStatus
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_job_id
          in: query
          description: OTA Job Id
          required: true
          schema:
            type: string
        - name: node_id
          in: query
          description: node Id
          required: false
          schema:
            type: string
        - name: summary
          in: query
          description: OTA Job summary
          required: false
          schema:
            type: boolean
        - name: num_records
          in: query
          description: Used for pagination, number of records to be fetched
          required: false
          schema:
            type: string
        - name: start_id
          in: query
          description: Used for pagination, Start Id of the record to be fetched
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtaJobNodeStatusResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>105013- Error occurred while fetching node OTA status
            <br>105014- OTA Job Id is missing
            <br>105017- Error occurred while fetching latest node OTA status
            <br>105024- OTA status not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/otajob/status/summary:
    get:
      tags:
        - OTA Service
      summary: This API provides summary of the the OTA job
      description: "This API provides the summary of the OTA job. It provides the count of nodes with various OTA status -  **triggered, in_progress, success, failed and the total count**. "
      operationId: getOTAJobStatusSummary
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_job_id
          in: query
          description: OTA Job Id
          required: true
          schema:
            type: string
            default: 'v1'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtaJobSummaryResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>105012- OTA job not found
            <br>105013- Error occurred while fetching node OTA status
            <br>105014- OTA Job Id is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/otaimage:
    post:
      tags:
        - OTA Service
      summary: API for the end user to upload a new firmware image
      description: "Using this API end user can upload a new firmware image. Using image url received in the response, the user can push the OTA for the device"
      operationId: useruploadotaimage
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserOTAImageRequest'
            examples:
              Upload OTA Image:
                value:
                  type: 'Image type'
                  image_name: 'Image name'
                  base64_fwimage: 'base64_fwimage'
        description: Request body for uploading new firmware image. type is optional parameter.
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOTAImageResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>103013- User to node mapping does not exist
            <br>103014- Error in checking if node belongs to user
            <br>104001- Base64 firmware image is missing
            <br>104002- Image Name is missing
            <br>104003- Error occurred while parsing image
            <br>104004- Firmware version is missing
            <br>104005- Model is missing
            <br>104006- Error occurred while fetching OTA image
            <br>104007- Error occurred while fetching OTA image associated with another otajob
            <br>104008- OTA Image is associated with another OTA job, can't update
            <br>104009- Error occurred while generating OTA image id
            <br>104010- OTA Image size should be smaller than 5 mb
            <br>104011- Invalid base64 firmware image
            <br>104012- The OTA Service is being set-up for your account. Please try again after some time
            <br>104013- Error occurred while uploading OTA image
            <br>104014- Error occurred while saving OTA image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/OTAImageAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/nodes/ota_update:
    get:
      tags:
        - OTA Service
      summary: Get latest OTA update for the node associated with the user
      description: "Using this API the end user can check if there is any OTA update, for the node which is associated with his account"
      operationId: getotaupdate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOTAUpdateRequest"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>100013- Failed to generate JSON response
            <br>103020- Node does not belong to user
            <br>104006- Error occurred while fetching OTA image
            <br>104015- OTA image not found
            <br>105009- The OTA Service is being set-up for your account. Please try again after some time
            <br>105017- Error occurred while fetching latest node OTA status
            <br>105018- NodeId is missing
            <br>105019- Error occurred while fetching latest OTA update
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
        "500":
          description: failure
              <br>Error Codes and Error Description
              <br>100001- Error in fetching user details
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []
    post:
      tags:
        - OTA Service
      summary: Push OTA update to the node
      description: "Using this API the end user can push OTA update to the node which is associated with his account"
      operationId: postotaupdate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPushOtaUpdateRequest'
            examples:
              Push OTA Update:
                value:
                  ota_job_id: 'OTA job Id'
                  node_id: 'node Id'
        description: Request body for uploading new firmware image. ota_job_id and node_id are required parameters.
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>103013- User to node mapping does not exist
            <br>105014- OTA Job Id is missing
            <br>105018- NodeId is missing
            <br>105036- OTA Job is not associated with the node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100013- Failed to generate JSON response
            <br>103014- Error in checking if node belongs to user
            <br>104006- Error occurred while fetching OTA image
            <br>105004- Error occurred while fetching OTA job info
            <br>105007- Failed to save OTA node status
            <br>105008- Failed to save latest OTA node status
            <br>105009- The OTA Service is being set-up for your account. Please try again after some time
            <br>105010- Error occurred while creating pre-signed url
            <br>105011- Error occurred while publishing to topic
            <br>105017- Error occurred while fetching latest node OTA status
            <br>105037- Error occurred while fetching node adminId
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/user/nodes/ota_status:
    get:
      tags:
        - OTA Service
      summary: Get latest status of OTA update for the node associated with the user
      description: "Using this API the end user can check the latest status of the OTA Job, for node which is associated with his account"
      operationId: getnodeotastatus
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node Id
          required: true
          schema:
            type: string
        - name: ota_job_id
          in: query
          description: OTA Job Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetOtaStatusResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100010- Node does not belong to User
            <br>105014- OTA Job Id is missing
            <br>105018- NodeId is missing
            <br>103013- User to node mapping does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
        "404":
          description: failure <br>Error Codes and Error Description
            <br>105024- OTA status not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>103014- Error in checking if node belongs to user
            <br>105017- Error occurred while fetching latest node OTA status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/node_group:
    post:
      tags:
        - Device grouping
      summary: Create admin device group
      description: "This API will create admin device group"
      operationId: createdevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
                oneOf:
                  - $ref: "#/components/schemas/CreateDeviceGroupRequest"
                  - $ref: "#/components/schemas/CreateDeviceGroupRequestWithGroupQueryParams"
            examples:
              Create device group with nodes:
                value:
                  group_name: 'group_name'
                  parent_group_id: "group_id"
                  type: "metadata"
                  nodes: ["node_id1"]
                  description: "description"
              Create device group with a single group query filter - node_model:
                value:
                  group_name: 'group_name'
                  type: "metadata"
                  node_model: "node_model"
                  description: "description"
              Create device group with two group query filters - node_type and node_model:
                value:
                  group_name: 'group_name'
                  type: "metadata"
                  node_type: "node_type"
                  node_model: "node_model"
                  description: "description"
              Create device group with all group query filters:
                value:
                  group_name: 'group_name'
                  type: "metadata"
                  node_type: "node_type"
                  node_model: "node_model"
                  node_fw_version: "node_fw_version"
                  description: "description"
        description: "Request body for creating new device group.
                      <br><br><b>Mandatory Parameters:</b>
                    <ul><li>group_name</li></ul>
                    <br>
                    <b>Optional Parameters:</b>
                    <ol><li>nodes -> the list of nodes to be added to the group. </li>
                    <li>parent_group_id</li>
                    <li>description</li>
                    <li>type</li>
                    <li>node_fw_version</li>
                    <li>node_model</li>
                    <li>node_type</li></ol>
                    <br><b>If the nodes list is not specified, then node group is created, without any nodes in it.</b>
                    <br>Note: node_fw_version, node_model, node_type cannot be specified with parent_group_id and nodes."
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeviceGroupResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>108001- Group name is missing
            <br>108002- Group name must be 2 to 256 characters long
            <br>108003- Number of nodes specified should be between 1 and 100
            <br>108004- Error occurred while storing node group info details
            <br>108005- Error occurred while storing node group mapping details
            <br>108006- Error occurred while storing node group children details
            <br>108007- Group name already exists
            <br>108008- Error occurred while fetching node group info details
            <br>108009- Invalid group parent id
            <br>108010- Error occurred while fetching node group mapping details
            <br>108011- Sub group can not be created
            <br>108012- Some of the nodes are not claimed by user
            <br>108015- Some of the nodes are not present in parent group
            <br>108025- The length of group description must be less than 500 characters
            <br>108059- Error, sub grouping not supported with grouping by node_model, node_type or node_fw_version
            <br>108061- Error, nodes not to be specified with node_model, node_type or node_fw_version
            <br>108066- Regroup not supported for this method
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "404":
          description: failure
            <br>Error Codes and Error Description
            <br>108063- No nodes found for the given group_query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>108014- Error occurred while fetching user node association details
            <br>108062- Error occurred while getting node list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - Device grouping
      summary: Update admin device group
      description: "This API will update admin device group"
      operationId: updatedevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAdminDeviceGroupRequest"
            examples:
              Update device group:
                value:
                  group_name: 'group_name'
                  type: "metadata"
                  operation: 'operation'
                  nodes: ["node_id1"]
                  description: "description"
              Remove nodes from Device Group:
                value:
                  operation: 'remove'
                  nodes: ["node_id1","node_id2"]
              Regroup group_query based group:
                value:
                  regroup: true
        description: "Request body for updating the existing node group.
                    <ol>
                    <li>Using this API, the user can either add or remove the nodes to the group or change the parameters of the group like group name and type.
                    <li>The value of operation can be <b>add or remove</b>.
                    <li>While adding or removing nodes, nodes array is required to be specified in the request body.
                    <li>For updating group name, description and type , the new values for these parameters need to be specified.
                    <li><b>regroup</b> - this parameter is applicable to only <i>group_query</i> based groups. If a group is created based on a <i>group_query</i> and some nodes' type, model or firmware version is changed, then the <b>regroup</b> option removes nodes which no longer satisfy the <i>group_query</i> and adds newly added/updated nodes which match the <i>group_query</i>.
                    </ol>"
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>108002- Group name must be 2 to 256 characters long
            <br>108003- Number of nodes specified should be between 1 and 100
            <br>108007- Group name already exists
            <br>108012- Some of the nodes are not claimed by user
            <br>108015- Some of the nodes are not present in parent group
            <br>108016- Group id is missing
            <br>108017- Invalid operation specified.[Valid operation values are add/remove]
            <br>108023- Group does not exist
            <br>108024- Either group name, type, description, regroup [true] or operation needs to specified
            <br>108025- The length of group description must be less than 500 characters
            <br>108060- Error, node_model, node_type or node_fw_version not to be specified in an update request
            <br>108065- Error, cannot regroup as the group is not created using group_query
            <br>108067- Regroup cannot be specified with operation, group_name, description or type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>108006- Error occurred while storing node group mapping details
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108014- Error occurred while fetching user node association details
            <br>108018- Error occurred while updating node group info details
            <br>108019- Error occurred while removing node group mappings
            <br>108020- Error occurred while fetching sub groups
            <br>108062- Error occurred while getting node list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Device grouping
      summary: Get admin device group
      description: "This API will get the details about the admin device group.
                    <ol><li> By Default all the groups with their sub-groups will be returned</li>
                    <li>start_id and num_records are used for pagination of groups.</li>
                    <li>When group_id or group_name is passed then details of that group will be returned, with nodes and subgroups.</li>
                    <ul><li>To get node details set node_details flag to true.</li>
                    <li>start_id and num_records are used for pagination of nodes and node_details.</li>
                    <li>when node details is requested then nodes array will be removed from the output.</li> </ul>
                    <li>If a group is created based on a <i>group_query</i> with some node type, model and firmware version and <b>node_model</b>, <b>node_type</b> and/or <b>node_fw_version</b> are provided, then all the groups that have the exact same <i>group_query</i> filters are returned. <br><font color='red'>Note</font> - If for any such group, some nodes' type, model or firmware version is changed, then the <b>regroup</b> option provided in the PUT API should be used.</li>
                    </ol>"
      operationId: admingetdevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group Id
          schema:
            type: string
        - name: group_name
          in: query
          description: group Name
          schema:
            type: string
        - name: node_details
          in: query
          description: optional flag **(true/false)**, to indicate if the node_details is required in the response
          schema:
            type: boolean
            default: false
        - name: node_type
          in: query
          description: node_type in group_query based group searching
          schema:
            type: string
        - name: node_model
          in: query
          description: node_model in group_query based group searching
          schema:
            type: string
        - name: node_fw_version
          in: query
          description: node_fw_version in group_query based group searching
          schema:
            type: string
        - name: start_id
          in: query
          description: This is used for the pagination
          schema:
            type: string
        - name: num_records
          in: query
          description: This is used for the pagination
          schema:
            type: string
            default: 25
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceGroupResponse'
              examples:
                Default output:
                  $ref: '#/components/examples/GetDeviceGroupWithoutNodesListResponse'
                When group_id is set:
                  $ref: '#/components/examples/GetNodeGroupByIdWithNodesAndSubgroups'
                When group_id is set with node_details=true:
                  $ref: '#/components/examples/GetNodeGroupByIdWithNodeDetails'
                When group_name is set:
                  $ref: '#/components/examples/GetNodeGroupByNameWithNodesAndSubgroups'
                When group_name is set with node_details=true:
                  $ref: '#/components/examples/GetNodeGroupByNameWithNodeDetails'
                When group_id is set and group created with one group_query filter - node_model:
                  $ref: '#/components/examples/GetNodeGroupByIdWithNodesAndOneGroupQuery'
                When group_id is set and group created with two group_query filters - node_type and node_model:
                  $ref: '#/components/examples/GetNodeGroupByIdWithNodesAndTwoGroupQuery'
                When group_id is set and group created with all group_query filters:
                  $ref: '#/components/examples/GetNodeGroupByIdWithNodesAndAllGroupQuery'
                When group_name is set and group created with all group_query filters:
                  $ref: '#/components/examples/GetNodeGroupByNameWithNodesAndAllGroupQuery'
                When node_type and node_model is specified:
                  $ref: '#/components/examples/GetDeviceGroupNodeListByNodeTypeNodeModel'
                When node_type, node_model and node_fw_version is specified:
                  $ref: '#/components/examples/GetDeviceGroupNodeListByNodeTypeNodeModelNodeFWVersion'
                When node_type, node_model and node_fw_version is specified - no such groups exist: 
                  value:
                    groups: []

        "400":
          description: failure
            <br> Error Codes and Error Description
            <br>108023- Group does not exist
            <br>108030- Specify either group_id or group_name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "500":
          description: failure
            <br> Error Codes and Error Description
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108020- Error occurred while fetching sub groups
            <br>108026- Error occurred while getting node details
            <br>108064- Error occurred while updating node count
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "404":
          description: failure
            <br> Error Codes and Error Description
            <br>108027- You haven't created any groups yet
            <br>108029- Group with the group name doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Device grouping
      summary: Delete admin device group
      description: "This API will delete admin device group"
      operationId: deletedevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>108008- Error occurred while fetching node group info details
            <br>108016- Group id is missing
            <br>108022- Error occurred while deleting group
            <br>108023- Group does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/node_group:
    post:
      tags:
        - Device grouping
      summary: Create the user device group
      description: "This API is used for creating new node group. The maximum level for the Node Group hierarchy can be upto three."
      operationId: usercreatedevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeviceGroupRequest"
            examples:
              Create device group:
                value:
                  group_name: 'group_name'
                  parent_group_id: 'parent_group_id'
                  type: 'group_metadata'
                  mutually_exclusive: true
                  nodes: ["node_id1"]
                  description: "description"
        description: "Request body for creating new device group.
                      <br><br><b>Mandatory Parameters:</b>
                    <ul><li>group_name</li></ul>
                    <br>
                    <b>Optional Parameters:</b>
                    <ol><li>nodes -> the list of nodes to be added to the group. </li>
                    <li>parent_group_id</li>
                    <li>description</li>
                    <li>type</li></li>
                    <li>mutually_exclusive -> When mutually_exclusive flag is true, group will be considered as Mutually exclusive group i.e Nodes which are part of this group can't be part of the other mutually exclusive groups having same group type and same parent(Groups having no parent IDs can also be considered having same parent)</ol>
                    <br><b>If the nodes list is not specified, then node group is created, without any nodes in it.</b>"
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeviceGroupResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>108001- Group name is missing
            <br>108002- Group name must be 2 to 256 characters long
            <br>108003- Number of nodes specified should be between 1 and 100
            <br>108007- Group name already exists
            <br>108009- Invalid group parent id
            <br>108011- Sub group can not be created
            <br>108013- Some of the nodes are not mapped by user
            <br>108015- Some of the nodes are not present in parent group
            <br>108025- The length of group description must be less than 500 characters
            <br>108056- You cannot modify a shared group. Only the group owner can do modifications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>108004- Error occurred while storing node group info details
            <br>108005- Error occurred while storing node group mapping details
            <br>108006- Error occurred while storing node group children details
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108014- Error occurred while fetching user node association details
            <br>108042- Error adding user group sharing
            <br>108057- Error getting the shared groups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - Device grouping
      summary: Update user device group
      description: "This API will update user device group"
      operationId: userupdatedevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDeviceGroupRequest"
            examples:
              Update device group:
                value:
                  group_name: 'group_name'
                  operation: 'add/remove'
                  type: 'type'
                  mutually_exclusive: true
                  nodes: ["node_id1"]
                  description: "description"
        description: "Request body for updating the existing node group.
                      <ol><li>Using this API, the user can either add or remove the nodes to the group or change the parameters of the group like group name and type. 
                    <li>The value of operation can be <b>add or remove</b>. 
                    <li>While adding or removing nodes, nodes array is required to be specified in the request body. 
                    <li>For updating group name, description and type , the new values for these parameters need to be specified.
                    <li>mutually_exclusive -> When mutually_exclusive flag is true, group will be considered as Mutually exclusive group i.e Nodes which are part of this group can't be part of the other mutually exclusive groups having same group type and same parent(Groups having no parent IDs can also be considered having same parent)"
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>108002- Group name must be 2 to 256 characters long
            <br>108003- Number of nodes specified should be between 1 and 100
            <br>108007- Group name already exists
            <br>108012- Some of the nodes are not claimed by user
            <br>108015- Some of the nodes are not present in parent group
            <br>108016- Group id is missing
            <br>108017- Invalid operation specified.[Valid operation values are add/remove]
            <br>108023- Group does not exist
            <br>108024- Either group name, type, description or operation needs to specified
            <br>108025- The length of group description must be less than 500 characters
            <br>108056- You cannot modify a shared group. Only the group owner can do modifications
            <br>108013- Some of the nodes are not mapped by user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>108005- Error occurred while storing node group info details
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108014- Error occurred while fetching user node association details
            <br>108018- Error occurred while updating node group info details
            <br>108019- Error occurred while removing node group mappings
            <br>108020- Error occurred while fetching sub groups
            <br>108042- Error adding user group sharing
            <br>108057- Error getting the shared groups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Device grouping
      summary: Get user device group
      description: "This API will get the details about the user device group.
                    <ol><li>By Default all the groups with their details will be returned</li>
                    <li>To get list of nodes in a group or for all groups, set node_list flag to true.</li>
                    <li>To get sub groups in a group or for all groups, set sub_groups flag to true.</li>
                    <li>start_id and num_records are used for pagination of groups.</li>
                    <li>When group_id is passes then details of that group will be returned.</li>
                    <li>When group_name is passes then details of that group will be returned.</li>
                    <ul>
                    <li>To get node details set node_details flag to true.</li>
                    <li>When node details is requested, the nodes array will be removed from the output.</li></ul>
                    <li>The node_details flag is applicable only when group_id or group_name is passed</li>
                    </ol>"
      operationId: usergetdevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group Id
          schema:
            type: string
        - name: optional group_name
          in: query
          description: group Name
          schema:
            type: string
        - name: node_list
          in: query
          description: optional flag **(true/false)**, to indicate if the node list is required in the response
          schema:
            type: boolean
            default: false
        - name: sub_groups
          in: query
          description: optional flag **(true/false)**, to indicate if the sub groups list is required in the response
          schema:
            type: boolean
            default: false
        - name: node_details
          in: query
          description: optional flag **(true/false)**, to indicate if the node_details is required in the response
          schema:
            type: boolean
            default: false
        - name: start_id
          in: query
          description: This is used for the pagination
          schema:
            type: string
        - name: num_records
          in: query
          description: This is used for the pagination
          schema:
            type: string
            default: 25
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceGroupResponse'
              examples:
                group_id specified, node_details=false, node_list=true, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupResponseGroupID'
                group_id specified, node_details=false, node_list=true, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupNodeListGroupID'
                group_id specified, node_details=false, node_list=false, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupWithoutNodesListResponseGroupID'
                group_id specified, node_details=false, node_list=false, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupBaseGroupID'
                group_id specified, node_details=true, sub_groups=true, node_list=true/false:
                  $ref: '#/components/examples/GetNodeGroupByIdArrayWithNodeDetails'
                group_id specified, node_details=true, sub_groups=false, node_list=true/false:
                  $ref: '#/components/examples/GetNodeGroupByIdArrayWithNodeDetailsWithoutSubGroups'
                group_id not specified, group_name not specified, node_list=true, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupResponse'
                group_id not specified, group_name not specified, node_list=true, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupNodeList'
                group_id not specified, group_name not specified, node_list=false, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupWithoutNodesListResponse'
                group_id not specified, group_name not specified, node_list=false, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupBase'
                group_name is specified, node_details=false, node_list=true, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupResponseGroupName'
                group_name specified, node_details=false, node_list=true, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupNodeListGroupName'
                group_name specified, node_details=false, node_list=false, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupWithoutNodesListResponseGroupName'
                group_name specified, node_details=false, node_list=false, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupBaseGroupName'
                group_name specified, node_details=true, sub_groups=true, node_list=true/false:
                  $ref: '#/components/examples/GetNodeGroupByNameArrayWithNodeDetails'
                group_name specified, node_details=true, sub_groups=false, node_list=true/false:
                  $ref: '#/components/examples/GetNodeGroupByNameArrayWithNodeDetailsWithoutSubGroups'

        "400":
          description: failure
            <br> Error Codes and Error Description
            <br>108023- Group does not exist
            <br>108030- Specify either group_id or group_name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "500":
          description: failure
            <br> Error Codes and Error Description
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108020- Error occurred while fetching sub groups
            <br>108026- Error occurred while getting node details
            <br>108064- Error occurred while updating node count
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "404":
          description: failure
            <br> Error Codes and Error Description
            <br>108029- Group with the group name doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Device grouping
      summary: Delete user device group
      description: "This API will delete user device group"
      operationId: userdeletedevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure
            <br>Error Codes And Error Description
            <br>100006- Invalid request body
            <br>108016- Group id is missing
            <br>108023- Group does not exist
            <br>108028- Error cannot delete group associated with active OTA jobs
            <br>108056- You cannot modify a shared group. Only the group owner can do modifications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes And Error Description
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108019- Error occurred while removing node group mappings
            <br>108020- Error occurred while fetching sub groups
            <br>108022- Error occurred while deleting group
            <br>108043- Error removing user group sharing
            <br>108057- Error getting the shared groups
            <br>108068- Error occurred while fetching existing secondary users mapped to a group
            <br>108069- Error occurred while fetching existing primary users mapped to a group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/node_group/sharing:
    put:
      tags:
        - Device grouping
      summary: This API creates the sharing of Groups between users.
      description: "This API allows Primary users to share the groups with other users either with primary or secondary user role. User Name of the secondary user and groups are mandatory parameters.Primary flag to make the users as primary is an optional parameter. Metadata is an optional parameter, used to store additional info about node sharing request."
      operationId: addUserGroupSharing
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserGroupSharingRequest'
            examples:
              Add User Group Sharing:
                value:
                  groups: ["group_id1"]
                  user_name: 'username@domain.com'
                  primary: true
                  metadata: { "devices": [
                    {
                      "name": "AC Switch", "type": "esp.device.switch"
                    }]
                    }
        description: Add User Group Sharing
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/APISuccessResponseWithRequestId'
              examples:
                Add User Group Sharing:
                  value:
                    status: 'success'
                    description: 'Success description'
                    request_id: 'request_id'

        "400":
          description: failure<br>Error Codes and Error Description
            <br>101001- Error in fetching user details
            <br>100006- Invalid request body
            <br>100007- Either User Id or User Email needs to be provided
            <br>108013- Some of the nodes are not mapped by user
            <br>108036- Group list too long. It can have maximum of 10 groups.
            <br>108038- Error some groupIds are missing.
            <br>108041- Error, User should be primary owner of the groups in the request
            <br>108044- Please specify at least one group in the request
            <br>108045- Please specify the user name to whom the groups need to be shared missing
            <br>108046- Self group sharing operations[add/remove] are not allowed
            <br>108048- Error, Some of the groups in the group sharing request does not belong to the user
            <br>108050- User name does not exist
            <br>108052- Error, User should be primary owner for all nodes in the groups that are in the request
            <br>107029- Error, One of the nodes already have mapping with different role    
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
        "500":
          description: "failure<br>Error Codes and Error Description
            <br>108010- Error occurred while fetching node group mapping details
            <br>108034- Error getting Request
            <br>108047- Error occurred while checking if group belongs to requesting user
            <br>108049- Error occurred while checking if the sharing user exists
            <br>108053- Error occurred while checking if node belongs to requesting user
            <br>108068- Error occurred while fetching existing secondary users mapped to a group
            <br>108069- Error occurred while fetching existing primary users mapped to a group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Device grouping
      summary: This API removes the sharing of Groups between the users.
      description: "This API allows the primary users to remove the sharing of groups with other users.It also allows secondary users to remove their own sharing with the groups."
      operationId: RemoveUserGroupSharing
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: groups
          in: query
          description: Comma separated group_ids (Example groups=group_id1,group_id2)
          required: true
          schema:
            type: string
        - name: user_name
          in: query
          description: User Name
          required: true
          schema:
            type: string
            example: username@domain.com
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/APISuccessResponse'
              examples:
                Remove User Group Sharing:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description-
            <br>101001- Error in fetching user details
            <br>100007- Either User Id or User Email needs to be provided
            <br>108013- Some of the nodes are not mapped by user
            <br>108031- Invalid GroupIDs list
            <br>108036- Group list too long. It can have maximum of 10 groups.
            <br>108038- Error some groupIds are missing.
            <br>108041- Error, User should be primary owner of the groups in the request
            <br>108044- Please specify at least one group in the request
            <br>108045- Please specify the user name to whom the groups need to be shared missing
            <br>108046- Self group sharing operations[add/remove] are not allowed
            <br>108048- Error, Some of the groups in the group sharing request does not belong to the user
            <br>108050- User name does not exist
            <br>108052- Error, User should be primary owner for all nodes in the groups that are in the request
            <br>108055- Cannot unshare groups that were shared via parent group
            <br>108071- Error, User should be secondary owner of all groups in the request in case of self group sharing remove
            <br>108072- Error, User should be secondary owner of all nodes in the groups that are in the request in case of self group sharing remove"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description-
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108019- Error occurred while removing node group mappings
            <br>108020- Error occurred while fetching sub groups
            <br>108022- Error occurred while deleting group
            <br>108043- Error removing user group sharing
            <br>108047- Error occurred while checking if group belongs to requesting user
            <br>108049- Error occurred while checking if the sharing user exists
            <br>108053- Error occurred while checking if node belongs to requesting user
            <br>108068- Error occurred while fetching existing secondary users mapped to a group
            <br>108069- Error occurred while fetching existing primary users mapped to a group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Device grouping
      summary:  This API fetches the sharing details for the nodes the current user is associated with.
      description: "This API is used to fetch the Group sharing details. Here are the details -
                    <ul><li>When no parameters are passed it returns the sharing details of all the groups that this user is associated with (Primary or Secondary)</li>
                    <li>When group_id is passed, it returns the sharing details of that group. The requesting user can be Primary or Secondary.</li>
                    <li>When sub_groups is set as true(with or without groupId), it returns the sharing details of the sub groups as well. The requesting user can be Primary or Secondary.</li>
                    <li>If the Get group sharing API is called by the secondary user, the list of other secondary users this group is associated with, will not be returned.</li></ul>"
      operationId: getUserGroupSharing
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group_id of group to get the sharing details
          required: false
          schema:
            type: string
        - name: sub_groups
          in: query
          description: group_id of group to get the sharing details
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserGroupSharingResponse"
              examples:
                sub_groups=false:
                  value:
                    group_sharing:
                        - group_id: string
                          users:
                              primary:
                              - primary_user@domain.com
                              secondary:
                              - secondary_user@domain.com
                sub_groups=true:
                  value:
                    group_sharing:
                        - group_id: string
                          users:
                              primary:
                              - primary_user@domain.com
                              secondary:
                              - secondary_user@domain.com
                          sub_groups:
                          - group_id: string
                            users:
                                primary:
                                - primary_user@domain.com
                                secondary:
                                - secondary_user@domain.com
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100007- Either User Id or User Email needs to be provided
            <br>108023- Group does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description
            <br>108008- Error occurred while fetching node group info details
            <br>108020- Error occurred while fetching sub groups
            <br>108058- Error occurred while fetching shared users of group
            <br>108068- Error occurred while fetching existing secondary users mapped to a group
            <br>108069- Error occurred while fetching existing primary users mapped to a group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/node_group/sharing/requests:
    get:
      tags:
        - Device grouping
      summary: This API is used to get the sharing requests raised between users.
      description: "This API allows the primary and secondary users to get the sharing requests.
                    <ol>
                    <li>To get the requests raised by primary user, with primary_user flag set as true</li>
                    <li>To get the requests received by secondary user</li>
                    <li>To get the details of a request by request_id</li>
                    </ol>
                    To support pagination start_request_id, start_user_name, num_records are added to the API."
      operationId: getUserGroupSharingRequest
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: request_id
          in: query
          description: request Id
          required: false
          schema:
            type: string
        - name: primary_user
          in: query
          description: This is a boolean flag, which is used to denote whether to get the requests raised by Primary user(true) or received by secondary users (false). Default value for this flag is false.
          required: false
          schema:
            type: string
        - name: start_request_id
          in: query
          description: used in pagination
          required: false
          schema:
            type: string
        - name: start_user_name
          in: query
          description: used in pagination along with start_request_id
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: used to specify the no of records that must be returned. Default value is 10. The valid values are in the range of 1 to 10. If invalid value is given, default value is used.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/GetGroupSharingRequestResponse'
              examples:
                Get User Group Sharing Response:
                  value:
                    sharing_requests:
                      - request_id: "<request_id>"
                        request_status: "declined/pending"
                        request_timestamp: 1612182919
                        group_ids:
                            - "group1"
                            - "group2"
                        user_name: secondary_user@domain.com
                        primary_user_name: primary_user@domain.com
                        metadata: { "devices": [
                          {
                            "name": "AC Switch", "type": "esp.device.switch"
                          }]
                        }
                    next_request_id: next_request_id
                    next_user_name: next_user_name
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100007- Either User Id or User Email needs to be provided
            <br>101001- Error in fetching user details
            <br>108033- Specify primary_user parameter correctly. [Valid options are primary_user=true or primary_user=false or don't specify it. Default is false]
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description
            <br>108034- Error getting Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Device grouping
      summary: This API removes the sharing request of Groups between the users.
      description: "This API allows the primary users to remove the sharing request of groups with other users."
      operationId: removeUserGroupSharingRequest
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: request_id
          in: query
          description: Request Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
              examples:
                Remove User Group Sharing Request:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description-
            <br>101001- Error in fetching user details
            <br>100007- Either User Id or User Email needs to be provided
            <br>101001- Error in fetching user details
            <br>108035- RequestId is missing
            <br>108039- Error occurred while removing request as it was declined by the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
        "404":
          description: failure<br>Error Codes and Error Description-
            <br>108040- Group sharing request not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description-
            <br>108032- Error occurred while updating the request status
            <br>108034- Error getting Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
      security:
        - AccessToken: []

    put:
      tags:
        - Device grouping
      summary: This API creates the sharing of Node Groups between users.
      description: "This API allows Secondary or Primary user to accept or decline the request for node group sharing sent by the primary users.Here accept and request_id are mandatory parameters"
      operationId: AcceptorDenyUserGroupSharingRequests
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptOrDeclineNodeSharingRequest'
            examples:
              Accept or Decline request:
                value:
                  accept: true
                  request_id: 'request_id'
        description: Accept or Decline Sharing Request
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/APISuccessResponseWithRequestId'
              examples:
                Accept or Decline Sharing request:
                  value:
                    status: 'success'
                    description: 'Success description'

        "400":
          description: "failure<br>Error Codes and Error Description
            <br>101001- Error in fetching user details
            <br>100006- Invalid request body
            <br>100007- Either User Id or User Email needs to be provided
            <br>108013- Some of the nodes are not mapped by user
            <br>108035- RequestId is missing
            <br>108037- Error getting request. Either given request ID is invalid or has already been accepted or declined.
            <br>108041- Error, User should be primary owner of the groups in the request
            <br>108048- Error, Some of the groups in the group sharing request does not belong to the user
            <br>108052- Error, User should be primary owner for all nodes in the groups that are in the request
            <br>108054- Specify accept parameter correctly. Valid values are [true/false]"

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
        "500":
          description: "failure<br>Error Codes and Error Description
            <br>108004- Error occurred while storing node group info details
            <br>108005- Error occurred while storing node group mapping details
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108020- Error occurred while fetching sub groups
            <br>108032- Error occurred while updating the request status
            <br>108034- Error getting Request
            <br>108042- Error adding user group sharing
            <br>108047- Error occurred while checking if group belongs to requesting user
            <br>108053- Error occurred while checking if node belongs to requesting user
            <br>108068- Error occurred while fetching existing secondary users mapped to a group
            <br>108069- Error occurred while fetching existing primary users mapped to a group
            <br>108070- Error deleting existing group sharings with the user"            
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupSharingAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/stats_info:
    get:
      tags:
        - Statistical Service
      summary: This API is used to get the statistical info
      description: "This API is used to get the statistical information for the various Rainmaker operational parameters like, number of registered users or number of registered nodes, etc. This information can be queried based on the parameter name and the duration.
                    <br>The metrics data can be retrieved based on daily count, weekly count, monthly count or yearly count.  Only one duration parameter can be specified as the query parameter.
                    <ol>
                    <li>If none of these stats parameters or duration is specified in the request parameter, then the values for all the stats parameters with their total count is returned as the response.</li>
                    <li>Daily Count -  The start_date and end_date parameters are used to specify the date range, which is only applicable for daily_count. The difference between start and end dates can be maximum of 31 days and the end_date must be strictly greater than the start_date. The start date and end date should be specified in the YYYY-MM-DD format.</li>
                    <li>Weekly Count - The start_month, start_year, end_month, end_year parameters are used to specify the date range for weekly_count. The weekly data can be queried for upto 3 Months</li>
                    <li>Monthly Count - The start_month, start_year, end_month, end_year parameters are used to specify the date range for monthly_count. The monthly data can be queried for upto 12 Months</li>
                    <li>Yearly Count - The start_year, end_year parameters are used to specify the date range for yearly_count. The yearly data can be queried for upto 5 years.</li>
                    </ol>"
      operationId: GetStats
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: metric_name
          in: query
          description: "There are various metrics supported. They are -
                      <li>num_registered_users</li>
                      <li>num_registered_nodes</li>
                      <li>num_users_with_nodes</li>
                      <li>num_users_without_nodes</li>
                      <li>num_timed_out_node_association_reqs</li>
                      <li>num_claimed_nodes</li>
                      <li>num_online_nodes</li>
                      <li>num_offline_nodes</li>
                      Multiple stats parameters can be retrieved in one request, these parameters need to be separated by comma in the request."
          example: "num_offline_nodes,num_registered_nodes,num_registered_users"
          required: false
          schema:
            type: string
        - name: duration
          in: query
          description: "This parameter is user to set the duration of the count .They can be -
                      <li>daily_count</li>
                      <li>weekly_count</li>
                      <li>monthly_count</li>
                      <li>yearly_count</li>
                      Multiple duration parameters cannot be specified in one request"
          example: "daily_count"
          required: false
          schema:
            type: string
        - name: start_date
          in: query
          description: "This parameter is used to set the start_date, which is applicable only for daily_count. The expected Format for start_date is YYYY-MM-DD"
          example: "2020-04-07"
          required: false
          schema:
            type: string
        - name: end_date
          in: query
          description: "This parameter is used to set the end_date, which is applicable only for daily_count. The expected Format for end_date is YYYY-MM-DD"
          example: "2020-04-07"
          required: false
          schema:
            type: string
        - name: start_month
          in: query
          description: "This parameter is used to set the start_month, which is applicable only for weekly_count and monthly_count. The expected Format for start_month is month name like January. This field is case-insensitive."
          example: December
          required: false
          schema:
            type: string
        - name: end_month
          in: query
          description: "This parameter is used to set the end_month, which is applicable only for weekly_count and monthly_count. The expected Format for end_month is month name like January. This field is case-insensitive."
          example: December
          required: false
          schema:
            type: string
        - name: start_year
          in: query
          description: "This parameter is used to set the start_year, which is applicable only for weekly_count, monthly_count and yearly_count. The expected Format for start_year is YYYY"
          example: 2020
          required: false
          schema:
            type: string
        - name: end_year
          in: query
          description: "This parameter is used to set the end_year, which is applicable only for weekly_count, monthly_count and yearly_count. The expected Format for end_year is YYYY"
          required: false
          example: 2020
          schema:
            type: string
        - name: timezone
          in: query
          description: "This parameter is used to set the timezone(location) from where the query is made, based on <a href='https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'>IANA Tz Database name</a>. TimeZone can also be provided like EST but location name is preferred. This field is case-insensitive."
          required: false
          example: Asia/Calcutta
          schema:
            type: string
            default: UTC
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsAPISuccessResponse"
              examples:
                Default Output:
                  $ref: '#/components/examples/StatsDefaultData'
                Daily Data:
                  $ref: '#/components/examples/StatsDailyData'
                Weekly Data:
                  $ref: '#/components/examples/StatsWeeklyData'
                Monthly Data:
                  $ref: '#/components/examples/StatsMonthlyData'
                Yearly Data:
                  $ref: '#/components/examples/StatsYearlyData'

        "400":
          description: failures
            <br>Error Codes And Error Description
            <br>100002- API Version is not supported
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>118001- Error, Please provide a valid duration
            <br>118002- Error, Please provide valid metrics list separated by comma
            <br>118004- Error, the start date parameter is not specified correctly. Please Specify the value in YYYY-MM-DD format.
            <br>118005- Error, the end date parameter is not specified correctly. Please Specify the value in YYYY-MM-DD format.
            <br>118006- Weekly data can only be retrieved over a period of one to three months
            <br>118007- Monthly data can only be retrieved over a period of one to twelve months
            <br>118008- Yearly data can only be retrieved over a period of one to five years
            <br>118009- Daily data can only be retrieved over a period of one to thirty days
            <br>118010- Error, the end month parameter is not specified correctly. Valid value is name of month (e.g. January)
            <br>118011- Error, the end year parameter is not specified correctly. Please Specify the value in YYYY format
            <br>118012- Error, the start month parameter is not specified correctly. Valid value is name of month (e.g. January)
            <br>118013- Error, the start year parameter is not specified correctly. Please Specify the value in YYYY format
            <br>118014- Error, Please specify the timezone parameter correctly
            <br>118015- Error, the specified date range is invalid. End date must be greater than Start date
            <br>118016- Error, The date range contains future dates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsAPIFailureResponse"
        "404":
          description: failure<br>Error Codes and Error Description
            <br>101025- User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsAPIFailureResponse"
        "500":
          description: Server failures
            <br>Error Codes And Error Description
            <br>100001- Error in fetching user details
            <br>118003- Error getting the stats from DB. Please Query after some time.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/stats_init:
    post:
      tags:
        - Statistical Service
      summary: To Initialize data for stats service
      description: "This API is used to initialize data onto the stats table."
      operationId: initStats
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100002- API Version is not supported
            <br>100004- You are not authorized to perform this operation, Please contact administrator
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>118017- Error, Failed to Invoke the stats init lambda
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/webhook_integration:
    post:
      tags:
        - Webhook Integration
      summary: This API adds new webhook for specified integration.
      description: "This API adds new webhook for specified service name, endpoint and whether its enabled or not.
                  <p>&nbsp; &nbsp; <strong>&nbsp;Service Name </strong> : Name of external service to be integrated</p>
                  <p>&nbsp; &nbsp; &nbsp;<strong>Endpoint Name</strong> : A Service may have more than Webhook Endpoints. Endpoint Name of Service which we are integrating to&nbsp;</p>
                  <p>&nbsp; &nbsp; &nbsp;<strong>Enabled</strong> : This flag tells whether this integration is enabled</p>
                  <p>&nbsp;</p></p>"
      operationId: addWebhookIntegration
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWebhookIntegrationRequest'
            examples:
              Add Webhook Integration:
                value:
                  service_name: 'gva'
                  endpoint_name: 'request_sync'
                  enabled: true
        description: request body for creating new Webhook Integration.
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookAPISuccessResponse"
        "400":
          description: failure
            <br>error codes and error description
            <br>100006 - invalid request body
            <br>113001 - Service Name is missing
            <br>113002 - Endpoint Name is missing
            <br>113008 - Integration Enabled is missing
            <br>113010 - Error while fetching webhook configuration
            <br>113011 - Integration webhook configuration doesn't exist for given Integration Service Name and Endpoint Name
            <br>113012 - Integration webhook configuration already exists for Integration Service Name  and Endpoint Name
            <br>113013 - Invalid Endpoint Name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookIntegrationAPIFailureResponse"
        "500":
          description: failure <br>error codes and error description
            <br>113014 - Error while saving Integration Info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookIntegrationAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - Webhook Integration
      summary: This API updates existing webhook configuration.
      description: "This API updates existing webhook configuration for specified integration and its endpoint.
                    <p>&nbsp; &nbsp; <strong>&nbsp;Service Name </strong> : Name of external service to be integrated</p>
                    <p>&nbsp; &nbsp; &nbsp;<strong>Endpoint Name</strong> : A Service may have more than Webhook Endpoints. Endpoint Name of Service which we are integrating to&nbsp;</p>
                    <p>&nbsp; &nbsp; &nbsp;<strong>Enabled</strong> : This flag tells whether this integration is enabled</p>
                    <p>&nbsp;</p></p>"
      operationId: updateWebhookIntegration
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookIntegrationRequest'
            examples:
              Add Webhook Integration:
                value:
                  service_name: 'gva'
                  endpoint_name: 'request_sync'
                  enabled: true
        description: request body for updating existing Webhook Integration configuration.
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookAPISuccessResponse"
        "400":
          description: failure <br>error codes and error description
            <br>100006- invalid request body
            <br>113010 - Error while fetching webhook configuration
            <br>113011 - Integration webhook configuration doesn't exist for given Integration Service Name and Endpoint Name
            <br>113008 - Integration Enabled is missing
            <br>113016 - Integration webhook configuration is already in the requested state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookIntegrationAPIFailureResponse"
        "500":
          description: failure <br>error codes and error description
            <br>113014 - Error while saving Integration Info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookIntegrationAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Webhook Integration
      summary: Get webhook information.
      description: "This API will get the integration information of webhook."
      operationId: getWebhookIntegration
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: service_name
          in: query
          schema:
            type: string
        - name: endpoint_name
          in: query
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWebhookIntegrationResponse"
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100006 - invalid request body
            <br>113001 - Integration Service Name is missing
            <br>113002 - Endpoint Name is missing
            <br>113010 - Error while fetching webhook configuration
            <br>113011 - Integration webhook configuration doesn't exist for given Integration Service Name and Endpoint Name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookIntegrationAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Webhook Integration
      summary: This API removes the webhooks configured for integration.
      description: "This API allows admin to remove configured webhooks for integration."
      operationId: removeWebhookIntegration
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: service_name
          in: query
          required: true
          schema:
            type: string
        - name: endpoint_name
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookAPISuccessResponse'
        "400":
          description: failure
            <br>100006 - invalid request body
            <br>113002 - Endpoint Name is missing
            <br>113003 - integration_service_name is missing
            <br>113010- Error while fetching webhook configuration
            <br>113011 - Integration webhook configuration doesn't exist for given Integration Service Name and Endpoint Name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookIntegrationAPIFailureResponse"
        "500":
          description: failure
            <br>113014 - Error while deleting Integration Info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookIntegrationAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/admin/event_filter:
    post:
      tags:
        - Event Filter
      summary: This API adds event filter for given event and entity (user or node).
      description: "This API adds new event filter for specified event type and entity id (user or node id) <br>
                    <p>&nbsp; &nbsp; <strong>&nbsp;Event Type&nbsp;</strong>:&nbsp; This are Event Generated by Rainmaker System. Please refer following list of possible events.</p>
                    <ol>
                    <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_added</li>
                    <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.user_node_removed</li>
                    <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_sharing_add</li>
                    <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.node_connected</li>
                    <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_disconnected</li>
                    <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </strong>: rmaker.event.node_params_changed</li>
                    </ol>
                    <p>&nbsp; &nbsp; &nbsp;<strong>Enitity Type</strong> : User or Node or System can be entity (Case insensitive).</p>
                    <p>&nbsp; &nbsp; &nbsp;<strong>Entity Id</strong>&nbsp; &nbsp; &nbsp; : For Entity this is its Id. For User it's userId, For node its nodeId, For system it is System Event Id for that event (Please Refer following list).&nbsp;</p>
                    <ol>
                    <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_added</li>
                    <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.user_node_removed</li>
                    <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_sharing_add</li>
                    <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.node_connected</li>
                    <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_disconnected</li>
                    <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_params_changed</li>
                    </ol>
                    <p>&nbsp; &nbsp; <strong>&nbsp;Enabled:</strong>&nbsp; This denotes if given Event is enabled for given EntityId.</p>"
      operationId: addEventFilter
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventFilterRequest'
        description: request body for creating new event filter.
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure

            <br>Error Codes and Error Description
            <br>100006- invalid request body
            <br>113101 - Event Type is missing
            <br>113102 - Entity Id is missing
            <br>113103 - Entity Type is missing
            <br>113105 - Enabled at Entity Level is missing
            <br>113106 - Enabled for Integration is missing
            <br>113107 - Invalid Entity Type
            <br>113110 - Event Entity Mapping already exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>113111 - Error while saving Event Entity Mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - Event Filter
      summary: This API updates event filter for given event and entity (user or node)
      description: "This API updates event filter for given event type and entity id (user or node id)
                    <p>&nbsp; &nbsp; <strong>&nbsp;Event Type&nbsp;</strong>:&nbsp; This are Event Generated by Rainmaker System. Please refer following list of possible events.</p>
                    <ol>
                    <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_added</li>
                    <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.user_node_removed</li>
                    <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_sharing_add</li>
                    <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.node_connected</li>
                    <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_disconnected</li>
                    <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </strong>: rmaker.event.node_params_changed</li>
                    </ol>
                    <p>&nbsp; &nbsp; &nbsp;<strong>Enitity Type</strong> : User or Node or System can be entity (Case insensitive).</p>
                    <p>&nbsp; &nbsp; &nbsp;<strong>Entity Id</strong>&nbsp; &nbsp; &nbsp; : For Entity this is its Id. For User it's userId, For node its nodeId, For system it is System Event Id for that event (Please Refer following list).&nbsp;</p>
                    <ol>
                    <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_added</li>
                    <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.user_node_removed</li>
                    <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_sharing_add</li>
                    <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.node_connected</li>
                    <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_disconnected</li>
                    <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_params_changed</li>
                    </ol>
                    <p>&nbsp; &nbsp; <strong>&nbsp;Enabled:</strong>&nbsp; This denotes if given Event is enabled for given EntityId.</p>"

      operationId: updateEventFilter
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventFilterRequest'
        description: request body for updating event filter.
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- invalid request body
            <br>113101 - Event is missing
            <br>113102 - Entity Id is missing
            <br>113007 - Invalid Entity Type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>113111 - Error while saving Event Entity Mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Event Filter
      summary: Get Integration event filter information.
      description: "This API will get the integration event filter information for given event_type and entity(type/id).
                    <br>If the entity id(user or node id) is specified, then the event filter information will be returned for the event_type.
                    <br>If the entity type(user or node) is specified, then all the event filter information will be returned for the event_type.
                    <br>If just entity id(user or node id) is provided, then all the event filter mapped to that entity id will be returned.
                    <br>Either of event_type, entity_type or entity_id is required"
      operationId: getEventFilter
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: event_type
          in: query
          required: false
          schema:
            type: string
        - name: entity_type
          in: query
          required: false
          schema:
            type: string
        - name: entity_id
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventFilterResponse"
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>113101 - Event Type is missing
            <br>113102 - Entity Id is missing
            <br>113107 - Invalid Entity Type
            <br>113109 - Event Entity Mapping doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>113108 - Error while fetching Event Entity Mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Event Filter
      summary: This API removes the Integration event filter.
      description: "This API allows admin to remove Event Filter. This api requires request body"
      operationId: removeEventFilter
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      #      requestBody:
      #        content:
      #          application/json:
      #            schema:
      #              $ref: '#/components/schemas/DeleteEventFilterRequest'
      #        description: request body for deleting event filter.
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>113101 - Event Type is missing
            <br>113102 - Entity Id is missing
            <br>113107 - Invalid Entity Type
            <br>113109 - Event Entity Mapping doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventFilterAPIFailureResponse'
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>113108 - Error while fetching Event Entity Mapping
            <br>113111 - Error while saving Event Entity Mapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventFilterAPIFailureResponse'
      security:
        - AccessToken: []
  /{version}/user/event_filter:
    post:
      tags:
        - Event Filter for Users
      summary: This API adds event filter for given event and entity (user or node).
      description: "This API adds new event filter for specified event type and entity id (user or node id) <br>
                    <p>&nbsp; &nbsp; <strong>&nbsp;Event Type&nbsp;</strong>:&nbsp; This are Event Generated by Rainmaker System. Please refer following list of possible events.</p>
                    <ol>
                    <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_added</li>
                    <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.user_node_removed</li>
                    <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_sharing_add</li>
                    <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.node_connected</li>
                    <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_disconnected</li>
                    <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </strong>: rmaker.event.node_params_changed</li>
                    </ol>
                    <p>&nbsp; &nbsp; &nbsp;<strong>Enitity Type</strong> : User or Node can be entity (Case insensitive).</p>
                    <p>&nbsp; &nbsp; &nbsp;<strong>Entity Id</strong>&nbsp; &nbsp; &nbsp; : For Entity this is its Id. For User it's userId, For node its nodeId.
                    <p>&nbsp; &nbsp; <strong>&nbsp;Enabled:</strong>&nbsp; This denotes if given Event is enabled for given EntityId.</p>"
      operationId: addUserEventFilter
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventFilterRequest'
        description: request body for creating new event filter.
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure

            <br>Error Codes and Error Description
            <br>100006- invalid request body
            <br>113101 - Event Type is missing
            <br>113102 - Entity Id is missing
            <br>113103 - Entity Type is missing
            <br>113105 - Enabled at Entity Level is missing
            <br>113106 - Enabled for Integration is missing
            <br>113107 - Invalid Entity Type
            <br>113110 - Event Entity Mapping already exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>113111 - Error while saving Event Entity Mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - Event Filter for Users
      summary: This API updates event filter for given event and entity (user or node)
      description: "This API updates event filter for given event type and entity id (user or node id)
                    <p>&nbsp; &nbsp; <strong>&nbsp;Event Type&nbsp;</strong>:&nbsp; This are Event Generated by Rainmaker System. Please refer following list of possible events.</p>
                    <ol>
                    <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_added</li>
                    <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.user_node_removed</li>
                    <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_sharing_add</li>
                    <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.node_connected</li>
                    <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_disconnected</li>
                    <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </strong>: rmaker.event.node_params_changed</li>
                    </ol>
                    <p>&nbsp; &nbsp; &nbsp;<strong>Enitity Type</strong> : User or Node can be entity (Case insensitive).</p>
                    <p>&nbsp; &nbsp; &nbsp;<strong>Entity Id</strong>&nbsp; &nbsp; &nbsp; : For Entity this is its Id. For User it's userId, For node its nodeId.
                    <p>&nbsp; &nbsp; <strong>&nbsp;Enabled:</strong>&nbsp; This denotes if given Event is enabled for given EntityId.</p>"

      operationId: updateUserEventFilter
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventFilterRequest'
        description: request body for updating event filter.
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- invalid request body
            <br>113101 - Event is missing
            <br>113102 - Entity Id is missing
            <br>113007 - Invalid Entity Type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>113111 - Error while saving Event Entity Mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Event Filter for Users
      summary: Get Integration event filter information.
      description: "This API will get the integration event filter information for given event_type and entity(type/id).
                    <br>If the entity id(user or node id) is specified, then the event filter information will be returned for the event_type.
                    <br>If the entity type(user or node) is specified, then all the event filter information will be returned for the event_type.
                    <br>If just entity id(user or node id) is provided, then all the event filter mapped to that entity id will be returned.
                    <br>Either of event_type, entity_type or entity_id is required"
      operationId: getUserEventFilter
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: event_type
          in: query
          required: false
          schema:
            type: string
        - name: entity_type
          in: query
          required: false
          schema:
            type: string
        - name: entity_id
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventFilterResponse"
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>113101 - Event Type is missing
            <br>113102 - Entity Id is missing
            <br>113107 - Invalid Entity Type
            <br>113109 - Event Entity Mapping doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>113108 - Error while fetching Event Entity Mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventFilterAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Event Filter for Users
      summary: This API removes the Integration event filter.
      description: "This API allows user to remove Event Filter. This api requires request body"
      operationId: removeUserEventFilter
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      #      requestBody:
      #        content:
      #          application/json:
      #            schema:
      #              $ref: '#/components/schemas/DeleteEventFilterRequest'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>113101 - Event Type is missing
            <br>113102 - Entity Id is missing
            <br>113107 - Invalid Entity Type
            <br>113109 - Event Entity Mapping doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventFilterAPIFailureResponse'
        "500":
          description: failure
            <br>Error Codes and Error Description
            <br>113108 - Error while fetching Event Entity Mapping
            <br>113111 - Error while saving Event Entity Mapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventFilterAPIFailureResponse'
      security:
        - AccessToken: []
  /{version}/admin/push_notification/mobile_platform:
    post:
      tags:
        - Mobile Platform Application
      summary: Creates the new platform application
      description: "This API creates a new mobile platform application
                    <p>&nbsp; &nbsp; &nbsp;<strong>Platform</strong> : Represents a push notification service from a provider like Google, Amazon or Microsoft.</p>"
      operationId: platformapplicationcreation
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/GCMPlatformApplicationCreateRequest'
                - $ref: '#/components/schemas/APNSPlatformApplicationCreateRequest'
            examples:
              Create GCM Platform Application:
                value:
                  platform: 'GCM'
                  api_key: '<server api key>'
              Create APNS/APNS_SANDBOX Platform Application:
                value:
                  platform: 'APNS or APNS_SANDBOX'
                  ssl_certificate: '<ssl certificate>'
                  private_key: '<private key>'
        description: Request body for creating new platform application, Valid platform to be specified are ADM,APNS,APNS_SANDBOX or GCM.
        required: true
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>114002- Please provide a valid platform
            <br>114005- Platform credentials are invalid
            <br>114010- API key is missing
            <br>114011- Platform application is already configured
            <br>114026- Either certificate or private key is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>114001- Error occurred while fetching mobile platform application
            <br>114004- Error occurred while creating mobile platform application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Mobile Platform Application
      summary: This API fetches the list of configured platform applications
      description: "This API fetches configured platform application"
      operationId: getplatformapplication
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPlatformApplicationResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>114037- No platform applications found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>114001- Error occurred while fetching mobile platform application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Mobile Platform Application
      summary: This API removes the configured platform application.
      description: "This API removes the configured platform application."
      operationId: deleteplatformapplication
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: platform_application_arn
          in: query
          description: platform application arn
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/APISuccessResponse'
              examples:
                Remove Platform Application:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description-
            <br>114007- Platform application arn is missing
            <br>114009- Platform application arn is invalid
            <br>114014- Platform Application does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description-
            <br>114001- Error occurred while fetching mobile platform application
            <br>114008- Error occurred while deleting mobile platform application
            <br>114019- Error occurred while removing mobile platform endpoint details
            <br>114020- Error occurred while fetching mobile platform endpoint details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/user/push_notification/mobile_platform_endpoint:
    post:
      tags:
        - Mobile Platform Endpoint
      summary: Creates the new platform endpoint for the user's Mobile device
      description: "This API will be called from the Mobile App by the end user, to subscribe to Push Notification."
      operationId: platformendpointcreation
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformEndpointCreateRequest'
            examples:
              Create Platform Endpoint:
                value:
                  platform: '<platform>'
                  mobile_device_token: '<device token>'
        description: Request body for creating new platform application, Valid values for platform are GCM, APNS or APNS_SANDBOX.
        required: true
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformEndpointAPISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>114003- Platform application name is missing
            <br>114009- Platform application arn is invalid
            <br>114012- Mobile token is missing
            <br>114014- Platform Application does not exist
            <br>114016- Platform endpoint already exist
            <br>114018- Platform application name is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>114001- Error occurred while fetching mobile platform application
            <br>114013- Error occurred while creating platform endpoint
            <br>114015- Error occurred while storing platform endpoint details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Mobile Platform Endpoint
      summary: This API fetches configured platform endpoints
      description: "This API fetches configured platform endpoints"
      operationId: getplatformendpoint
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPlatformEndpointResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>114020- Error occurred while fetching mobile platform endpoint details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Mobile Platform Endpoint
      summary: This API removes the configured platform endpoint.
      description: "This API removes the configured platform endpoint. Either mobile_device_token or endpoint must be specified in query params."
      operationId: deleteplatformendpoint
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: mobile_device_token
          in: query
          description: mobile device token
          required: false
          schema:
            type: string
        - name: endpoint
          in: query
          description: platform endpoint ARN
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/APISuccessResponse'
              examples:
                Remove Platform Application:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description-
            <br>114021- Either mobile device token or endpoint must be specified
            <br>114036- No platform endpoint found
            <br>114040- Platform Application endpoint does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description-
            <br>114017- Error occurred while deleting mobile platform endpoint
            <br>114019- Error occurred while removing mobile platform endpoint details
            <br>114020- Error occurred while fetching mobile platform endpoint details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/admin/push_notification/publish_message:
    post:
      tags:
        - Publish Message
      summary: Publish message to user's device
      description: "This API will be used to publish messages to user's device in a bulk of 100000 users.
                    At least one of <b>email</b> or <b>user_id</b> list needs to be provided.
                    \n\n <b>user_id</b> has more preference over <b>email</b>."
      operationId: publishMessage
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: email
          in: query
          description: Comma separated email ids and the maximum number of email ids that can be specified are 100000
          schema:
            type: string
          example: email_id1@domain.com,email_id2@domain.com
        - name: user_id
          in: query
          description: Comma separated user ids and the maximum number of user ids that can be specified are 100000
          schema:
            type: string
          example: user_id1,user_id2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishMessage'
            examples:
              Publish message:
                value:
                  message_title: '<message title>'
                  message_body: '<message body>'
        description: Request body for publish message
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100020- Either email or user id is missing
            <br>114022- Message title is missing
            <br>114023- Message body is missing
            <br>114027- Message can be sent to a maximum 100000 users only
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>114024- Error occurred while publishing message
            <br>114039- Error occurred while publishing messages to users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/admin/push_notification/custom_message_template:
    post:
      tags:
        - Custom Mobile Platform Message Template
      summary: Create custom mobile platform message template
      description: "This API will be used to create custom mobile platform message template."
      operationId: createcustommessagetemplate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomMobileMessageTemplate'
            examples:
              Create Custom Mobile Message Template:
                value:
                  event_type: '<esp_rainmaker_sns_node_disconnected>'
                  message_title: '<message title>'
                  message_body: '<message body>'
                  event_data: '<enable/disable>'
        description: "Request body for creating custom mobile message template.
                      <p>&nbsp; &nbsp; &nbsp;<strong>Event Data</strong> : When event data is enabled, Event's raw data is shared with mobile.</p>
                      <p>&nbsp; &nbsp; &nbsp;<strong>Event Type</strong> : Event topic name.[same as SNS topic name]</p>"
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>114022- Message title is missing
            <br>114023- Message body is missing
            <br>114028- Event type is missing
            <br>114035- Either message title, message body or event data is missing
            <br>114038- Either enable or disable has to specified for event data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>114029- Error occurred while storing custom message template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Custom Mobile Platform Message Template
      summary: This API fetches configured custom mobile message template
      description: "This API fetches configured custom mobile message template."
      operationId: getcustommessagetemplate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: event_type
          in: query
          description: event type
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCustomMobileMessageTemplateResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>114033 No custom message templates found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>114030 Error occurred while fetching custom message template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - Custom Mobile Platform Message Template
      summary: This API updates the configured custom mobile message template.
      description: "This API updates the configured custom mobile message template."
      operationId: updatecustommessagetemplate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: event_type
          in: query
          description: event type
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishMessage'
            examples:
              Update Custom Mobile Message Template:
                value:
                  message_title: '<message title>'
                  message_body: '<message body>'
                  event_data: '<enable/disable>'
        description: Request body for updating custom mobile message template
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/APISuccessResponse'
              examples:
                Remove Platform Application:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description-
            <br>100006- Invalid request body
            <br>114028- Event type is missing
            <br>114035- Either message title, message body or event data is missing
            <br>114034- Invalid event type
            <br>114038- Either enable or disable has to specified for event data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description-
            <br>114031- Error occurred while updating custom message template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformApplicationAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/nodes/tsdata:
    get:
      tags:
        - Time Series Data
      summary: This API is used to get the Time Series Data
      description: "<p>This API is used to get the time series data for various measures like temperature, humidity, electric current, etc. reported by nodes. This information can be queried based on parameter name and time interval.
                    <br>The data can be retrieved for different time intervals like minute, hour, day, week, month or year
                    clubbed with query parameters <b>num_intervals</b> to specify the number of interval starting from today or <b>start_time and end_time</b> to specify the date and time range.
                    <ol>
                    <li><b>Minute</b> - Max Interval: 1 day or 1440 minutes</li>
                    <li><b>Hour</b> - Max Interval: 1 day or 24 hours</li>
                    <li><b>Day</b> - Max Interval: 31 days and end_time must be strictly greater than the start_time.</li>
                    <li><b>Week</b> - Max Interval: 12 weeks. week_start parameter is used to specify the start Day of the week. Ex: Monday</li>
                    <li><b>Month</b> - Max Interval: 12 months</li>
                    <li><b>Year</b> - Max Interval: 5 years</li>
                    <li><b>Raw</b> - Max Interval: 31 days</li>
                    </ol></p>

                    <p>Aggregates supported by different data types:
                    <ol>
                    <li><b>float</b> - All</li>
                    <li><b>int</b> - All</li>
                    <li><b>bool</b> - raw, latest, count</li>
                    <li><b>string</b> - raw, latest, count</li>
                    </ol></p>

                    <p><font color='red'>Note: </font>
                    <li>If aggregate is provided then either <b>start_time and end_time</b> or <b>num_interval</b> needs to be provided for each query.</li>
                    <li>If aggregate is not provided then raw data is returned for last 7 days.</li>
                    <li>The Range of data that is retrieved are [StartTime,EndTime) or [ CurrentTime - NumInterval, CurrentTime)</li>
                    <li>Pagination is only supported for TimeInterval: Minute, Hour, Day, Week and for Raw Data Retrieval.</li>
                    <li>Aggregate: latest is not supported for TimeInterval: Month and Year</li>
                    </p>"
      operationId: GetTSData
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: "This parameter is used to specify the node ID for which measures needs to be fetched."
          required: true
          example: node_id1
          schema:
            type: string
        - name: param_name
          in: query
          description: "Some examples of the parameter names are -
                      <li>temperature</li>
                      <li>humidity</li>
                      <li>electric_current</li>
                      A single valid measure need to be passed."
          example: "temperature"
          required: true
          schema:
            type: string
        - name: aggregate
          in: query
          description: "Following aggregate functions are supported - (To be changed)
                      <li><b>raw</b> - Returns all the actual values reported by device in given time interval. This is the default value for the parameter.</li>
                      <li><b>latest</b> - Returns the last entry reported by the device for the given time interval and time range</li>
                      <li><b>min</b> - Returns the min value reported by the device for the given time interval and time range</li>
                      <li><b>max</b> - Returns the max value reported by the device for the given time interval and time range</li>
                      <li><b>count</b> - Returns the number of values reported by the device for the given time interval and time range</li>
                      <li><b>avg</b> - Returns the avg values reported by the device for the given time interval and time range</li> <br>
                      Only one aggregate function can be specified at a time."
          example: "max"
          required: false
          schema:
            type: string
            default: raw
        - name: time_interval
          in: query
          description: "This parameter is used to specify the time interval for the params.
                      They can be -
                      <li>minute</li>
                      <li>hour</li>
                      <li>day</li>
                      <li>week</li>
                      <li>month</li>
                      <li>year</li>
                      <p>It is not applicable when aggregate is passed as raw.</p>"
          example: "day"
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: "This parameter is used to specify the data type of the param.
                      They can be -
                      <li>float</li>
                      <li>int</li>
                      <li>bool</li>
                      <li>string</li>"
          example: "int"
          required: false
          schema:
            type: string
            default: float
        - name: week_start
          in: query
          description: "This parameter is used to specify the start day of the week. This field is case insensitive. Only applicable in cases were the time_interval value is <b>week</b>."
          example: "Monday"
          required: false
          schema:
            type: string
            default: Monday
        - name: start_time
          in: query
          description: "This parameter is used to set the start time. The expected Format for start time is epoch time in seconds. Ex: 1628557200"
          example: 1628557200
          required: false
          schema:
            type: number
        - name: end_time
          in: query
          description: "This parameter is used to set the end time. The expected Format for end_date is epoch time in seconds. Ex: 1628557200"
          example: 1628557200
          required: false
          schema:
            type: number
        - name: num_intervals
          in: query
          description: "The user can specify either the start_time and end_time or num_intervals parameter.
                        If the num_intervals is specified, then the API will fetch the data from the current time for the previous 'n' intervals.
                        <p>i.e
                        <br> If <i>time_interval=day, aggregate=avg, parameter_name=temperature , device_id=1234</i>
                        <br> <i>num_intervals=5</i>
                        <br> The output would have data for previous 5 days starting from today. Not Applicable for Aggregate=Raw.</p>"
          example: 10
          required: false
          schema:
            type: number
        - name: start_id
          in: query
          description: "This parameter is used for pagination.
                        <br><b>The pagination token can be used for up to 5 Query Invocations, OR for a duration of up to 1 hour – whichever comes first.</b>"
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: "This parameter is used for pagination. Max Value = 200"
          required: false
          schema:
            type: number
            default: 200
            maximum: 200
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TSAPISuccessResponse"
              examples:
                Raw Data:
                  value:
                    ts_data:
                      - node_id: node_id
                        params:
                          - param_name: temperature
                            values:
                              - ts: 1628557200
                                val: 35.3
                              - ts: 1628560800
                                val: 35.7
                            num_records: 2
                        next_id: string
                        aggregate: raw
                Hourly Data:
                  value:
                    ts_data:
                      - node_id: node_id
                        params:
                          - param_name: temperature
                            values:
                              - ts: 1628557200
                                val: 35.3
                              - ts: 1628560800
                                val: 35.7
                        next_id: string
                        aggregate: max
                        interval: hour
                        num_records: 2
                Daily Data:
                  value:
                    ts_data:
                      - node_id: node_id
                        params:
                          - param_name: temperature
                            values:
                              - ts: 1625097600
                                val: 35.3
                              - ts: 1625184000
                                val: 35.7
                        next_id: string
                        aggregate: max
                        interval: day
                        num_records: 2
                Weekly Data:
                  value:
                    ts_data:
                      - node_id: node_id
                        params:
                          - param_name: temperature
                            values:
                              - ts: 1625443200
                                val: 35.3
                              - ts: 1626048000
                                val: 35.7
                        next_id: string
                        aggregate: max
                        interval: week
                        week_start: Monday
                        num_records: 2
                Monthly Data:
                  value:
                    ts_data:
                      - node_id: node_id
                        params:
                          - param_name: temperature
                            values:
                              - ts: 1625097600
                                val: 35.3
                              - ts: 1622505600
                                val: 35.7
                        next_id: string
                        aggregate: max
                        interval: month
                        num_records: 2
                Yearly Data:
                  value:
                    ts_data:
                      - node_id: node_id
                        params:
                          - param_name: temperature
                            values:
                              - ts: 1609459200
                                val: 35.3
                              - ts: 1577836800
                                val: 35.7
                        next_id: string
                        aggregate: max
                        interval: year
                        num_records: 2
        "400":
          description: failures
            <br>Error Codes And Error Description
            <br>100002- API Version is not supported
            <br>126001- Fetching node to User mapping failed
            <br>126002- User to node mapping does not exist
            <br>126003- Please Provide a valid Node ID
            <br>126004- Please Provide a valid parameter name
            <br>126005- Please Provide a valid aggregate
            <br>126006- Please Provide a valid time interval
            <br>126007- Please Provide a valid week start
            <br>126008- Error, Input query params StartTime and EndTime are missing
            <br>126009- Please Provide a valid Interval count
            <br>126010- Please Provide a valid start time
            <br>126011- Please Provide a valid end time
            <br>126012- Please Provide a valid time duration
            <br>126013- Start time must be less than end time
            <br>126015- If aggregate is provided then either start_time and end_time or num_interval needs to be provided for each query
            <br>126016- TimeInterval 'Month' and 'Year' are not supported for 'latest' aggregate
            <br>126017- Please provide a valid data type for the measure. Valid types are float,int,bool,string
            <br>126018- Looks like there is a type mismatch. Please provide a valid data type for the measure
            <br>126019- The given aggregate is not supported for this data type. Please refer documentation for supported aggregates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TSAPIFailureResponse"
        "500":
          description: Server failures
            <br>Error Codes And Error Description
            <br>100001- Error in fetching user details
            <br>126014- Error getting data from DB. Please try after some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TSAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/system_event_filter:
    put:
      tags:
        - Event Filter
      summary: This API updates system event filter
      description: "This API adds/removes the system event filter for the given event type "
      operationId: updateSystemEventFilter
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSystemEventFilterRequest'
        description: request body for updating system event filter.
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100001 - Error in fetching user details
            <br>100002 - API Version is not supported
            <br>100003 - Method not allowed
            <br>100006 - Invalid request body
            <br>113118 - Request body is missing key 'event_types'
            <br>113121 - Request body is missing key 'enabled'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemEventFilterAPIFailureResponse"
        "520":
          description: failure
            <br>Error Codes and Error Description
            <br>520    - Unknown error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemEventFilterAPIFailureResponse"
      security:
        - AccessToken: [ ]
    get:
      tags:
        - Event Filter
      summary: Get system event filter integration information.
      description: "This API will get the system level integration event filter "
      operationId: getSystemEventFilter
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSystemEventFilterResponse"
        "400":
          description: failure
            <br>100001 - Error in fetching user details
            <br>100002 - API Version is not supported
            <br>100003 - Method not allowed
            <br>100006 - Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemEventFilterAPIFailureResponse"
        "520":
          description: failure
            <br>Error Codes and Error Description
            <br>520 - Unknown error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorAPIFailureResponse"
      security:
        - AccessToken: [ ]

  /{version}/admin/webhook_event_mapping:
    get:
      tags:
        - Webhook Integration
      summary: Get webhook event mapping information.
      description: "This API will get the webhook integration mapping "
      operationId: getWebhookEventMapping
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: webhook_name
          in: query
          description: Webhook to be retrieved
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWebhookEventMappingResponse"
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100001 - Error in fetching user details
            <br>100002 - API Version is not supported
            <br>100003 - Method not allowed
            <br>100004 - You are not authorized to perform this operation, Please contact administrator
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemEventFilterAPIFailureResponse"
        "520":
          description: failure
            <br>Error Codes and Error Description
            <br>520 - Unknown error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorAPIFailureResponse"
      security:
        - AccessToken: [ ]
    put:
      tags:
        - Webhook Integration
      summary: This API adds webhook event mapping
      description: "This API adds the webhook event mapping "
      operationId: updateWebhookEventMapping
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutWebhookEventMappingRequest'
        description: request body for adding a webhook event mapping.
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100001 - Error in fetching user details
            <br>100002 - API Version is not supported
            <br>100003 - Method not allowed
            <br>100006 - Invalid request body
            <br>113114 - Webhook name is missing
            <br>113115 - Event name is missing
            <br>113116 - Webhook event mapping already exists
            <br>113128 - Webhook name cannot be more than 1024 characters
            <br>113129 - Event name cannot be more than 1024 characters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemEventFilterAPIFailureResponse"
        "520":
          description: failure
            <br>Error Codes and Error Description
            <br>520 - Unknown error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorAPIFailureResponse"
      security:
        - AccessToken: [ ]

    delete:
      tags:
        - Webhook Integration
      summary: This API removes webhook event mapping
      description: "This API removes the webhook event mapping "
      operationId: deleteWebhookEventMapping
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: webhook_name
          in: query
          description: Webhook to be removed
          required: true
          schema:
            type: string
        - name: event_name
          in: query
          description: Event to be removed
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100001 - Error in fetching user details
            <br>100002 - API Version is not supported
            <br>100003 - Method not allowed
            <br>100006 - Invalid request body
            <br>113114 - Webhook name is missing
            <br>113115 - Event name is missing
            <br>113117 - Webhook event mapping doesn't exist
            <br>113128 - Webhook name cannot be more than 1024 characters
            <br>113129 - Event name cannot be more than 1024 characters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemEventFilterAPIFailureResponse"
        "520":
          description: failure
            <br>Error Codes and Error Description
            <br>520 - Unknown error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorAPIFailureResponse"
      security:
        - AccessToken: [ ]

  /{version}/admin/webhook_user_node_integration:
    get:
      tags:
        - Webhook Integration
      summary: Get user node webhook integration information.
      description: "This API will get the user node webhook integrations "
      operationId: getWebhookUserNodeIntegration
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: webhook_name
          in: query
          description: Webhook to be retrieved
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWebhookUserNodeIntegrationResponse"
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100001 - Error in fetching user details
            <br>100002 - API Version is not supported
            <br>100003 - Method not allowed
            <br>113120 - Webhook doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemEventFilterAPIFailureResponse"
        "520":
          description: failure
            <br>Error Codes and Error Description
            <br>520 - Unknown error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorAPIFailureResponse"
      security:
        - AccessToken: [ ]

    post:
      tags:
        - Webhook Integration
      summary: This API adds webhook user node integration
      description: "This API adds the webhook for user node integration "
      operationId: addWebhookUserNodeIntegration
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookUserNodeIntegration'
        description: request body for adding a webhook for user node integration.
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100001 - Error in fetching user details
            <br>100002 - API Version is not supported
            <br>100003 - Method not allowed
            <br>100006 - Invalid request body
            <br>113114 - Webhook name is missing
            <br>113115 - Event name is missing
            <br>113119 - Webhook already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemEventFilterAPIFailureResponse"
        "520":
          description: failure
            <br>Error Codes and Error Description
            <br>520 - Unknown error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorAPIFailureResponse"
      security:
        - AccessToken: [ ]

    put:
      tags:
        - Webhook Integration
      summary: This API updates webhook user node integration.
      description: "This API updates the webhook for user node integration
            <br><br>IMPORTANT NOTES
              <br>- Identifiers (ex. webhook_name, event_name) cannot be updated.
              <br>- Only respective request body parameters according to operation will be updated. Any additional ones will be ignored. For example, if 'operation' is 'update_enabled', then only the 'enabled' parameter from request body would be updated, rest all would be ignored."
      operationId: updateWebhookUserNodeIntegration
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: operation
          in: query
          description: Operation to be performed (Supported operations:- update_enabled, add_nodes, remove_nodes, add_event, remove_event, update_event, update_active_timestamp)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookUserNodeIntegration'
        description: request body for updating a webhook for user node integration.
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100001 - Error in fetching user details
            <br>100002 - API Version is not supported
            <br>100003 - Method not allowed
            <br>100006 - Invalid request body
            <br>113114 - Webhook name is missing
            <br>113115 - Event name is missing
            <br>113120 - Webhook doesn't exist
            <br>113121 - Request body is missing key 'enabled'
            <br>113122 - Request body is missing key 'nodes_list'
            <br>113123 - Request body is missing key 'events'
            <br>113124 - Event already exists for the webhook
            <br>113125 - Event doesn't exists for the webhook
            <br>113126 - Request body is missing key 'active_timestamp'
            <br>113127 - Operation not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemEventFilterAPIFailureResponse"
        "520":
          description: failure
            <br>Error Codes and Error Description
            <br>520 - Unknown error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorAPIFailureResponse"
      security:
        - AccessToken: [ ]

    delete:
      tags:
        - Webhook Integration
      summary: This API deletes webhook user node integration
      description: "This API deletes the webhook for user node integration "
      operationId: deleteWebhookUserNodeIntegration
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: webhook_name
          in: query
          description: Webhook to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100001 - Error in fetching user details
            <br>100002 - API Version is not supported
            <br>100003 - Method not allowed
            <br>113114 - Webhook name is missing
            <br>113120 - Webhook doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemEventFilterAPIFailureResponse"
        "520":
          description: failure
            <br>Error Codes and Error Description
            <br>520 - Unknown error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorAPIFailureResponse"
      security:
        - AccessToken: [ ]

  /{version}/user/node_automation:
    post:
      tags:
        - Automation Trigger and Actions
      summary: This API adds new automation trigger
      description: "This API adds new automation trigger"
      operationId: addAutomationTriggerAction
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAutomationTriggerRequest'
            examples:
              Add Automation Trigger:
                $ref: "#/components/examples/AutomationTriggerRequestBodyExample"

        description: Request body for creating new automation trigger.
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationTriggerAPISuccessResponse"
        "400":
          description: failure
            <br>error codes and error description
            <br>100006 - invalid request body
            <br>127001 - Node Automation Name is missing
            <br>100009 - Node Id is missing
            <br>127002 - Please specify at least one event
            <br>127003 - Please specify at least one action
            <br>127011 - Automation name must be 2 to 256 characters long
            <br>127013 - More than one event specified, Please specify valid event operator. Valid event operator values are 'AND/OR'
            <br>127015 - Event limit exceeded. You can specify maximum of 5 event
            <br>127014 - Action limit exceeded. You can specify maximum of 10 actions
            <br>127010 - Node Automation with same name already exists
            <br>103020 - Node does not belong to user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationTriggerAPIFailureResponse"
        "500":
          description: failure
            <br>error codes and error description
            <br>126008 - Error occurred while fetching user automation trigger
            <br>126004 - Error occurred while storing user automation trigger
      security:
        - AccessToken: []
    put:
      tags:
        - Automation Trigger and Actions
      summary: This API updates existing automation trigger.
      description: "This API updates existing automation trigger"
      operationId: updateAutomationTriggerAction
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: automation_id
          in: query
          description: automation_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAutomationTriggerRequest'
            examples:
              Update Automation trigger:
                $ref: "#/components/examples/AutomationTriggerUpdateRequestBodyExample"
        description: Request body for updating existing automation trigger.
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>error codes and error description
            <br>100006- invalid request body
            <br>127005 - Automation Id is missing
            <br>127011 - Automation name must be 2 to 256 characters long
            <br>127010 - Node Automation with same name already exists
            <br>127013 - More than one event specified, Please specify valid event operator. Valid event operator values are 'AND/OR'
            <br>127015 - Event limit exceeded. You can specify maximum of 5 event
            <br>127014 - Action limit exceeded. You can specify maximum of 10 actions
            <br>103020 - Node does not belong to user
            <br>127012 - Invalid automation id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationTriggerAPIFailureResponse"
        "500":
          description: failure
            <br>error codes and error description
            <br>127008 - Error occurred while fetching user automation trigger
            <br>127006 - Error occurred while updating user automation trigger
      security:
        - AccessToken: []
    get:
      tags:
        - Automation Trigger and Actions
      summary: Get Automation trigger.
      description: "This API will fetch automation trigger"
      operationId: getAutomationTriggerAction
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: automation_id
          in: query
          schema:
            type: string
        - name: node_id
          in: query
          schema:
            type: string
        - name: start_id
          in: query
          description: use next_id from the response as start_id to fetch the next set of records
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: number of records to fetch
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAutomationTriggerResponse"
        "400":
          description: failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationTriggerAPIFailureResponse"
        "500":
          description: failure
            <br>error codes and error description
            <br>127008 - Error occurred while fetching user automation trigger
      security:
        - AccessToken: []
    delete:
      tags:
        - Automation Trigger and Actions
      summary: This API removes the automation trigger.
      description: "This API allows user to remove created automation trigger"
      operationId: removeAutomationTriggerAction
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: automation_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>127005 - Automation Id is missing
            <br>127012- Invalid automation id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationTriggerAPIFailureResponse"
        "500":
          description: failure
            <br>error codes and error description
            <br>127007 - Error occurred while deleting user automation trigger
      security:
        - AccessToken: []


externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://api.rainmaker.espressif.com
components:
  parameters:
    Pagelength:
      name: pagelength
      in: query
      description: Number of records to return
      schema:
        type: number
    Startindex:
      name: startindex
      in: query
      description: Start index for paging
      schema:
        type: number
  securitySchemes:
    AccessToken:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    APIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse
    APISuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        description:
          type: string
          example: 'Success description'
      xml:
        name: APISuccessResponse
    APISuccessResponseWithRequestId:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        description:
          type: string
          example: 'Success description'
        request_id:
          type:  string
          example: '123232323232'
      xml:
        name: APISuccessResponseWithRequestId

    APIResponseWithNodeId:
      type: object
      properties:
        node_id:
          type:  string
          example: 'node_id'
        status:
          type: string
          example: 'success'
        description:
          type: string
          example: 'Success description'
      xml:
        name: APIResponseWithNodeId

    MultiNodeSetParamsAPIResponseWithNodeId:
      type: array
      items:
        $ref: '#/components/schemas/APIResponseWithNodeId'
      xml:
        name: MultiNodeSetParamsAPIResponseWithNodeId

    UserLoginRequest:
      type: object
      properties:
        user_name:
          type: string
        password:
          type: string
          minimum: 8
          maximum: 256
      xml:
        name: logindata
    ExtendSessionRequest:
      type: object
      properties:
        user_name:
          type: string
        refreshtoken:
          type: string
      xml:
        name: logindata
    CreateUserRequest:
      type: object
      properties:
        user_name:
          type: string
        password:
          type: string
          minimum: 8
          maximum: 256
      xml:
        name: logindata
    ConfirmUserRequest:
      type: object
      properties:
        user_name:
          type: string
        verification_code:
          type: string
          minimum: 6
          maximum: 6
      xml:
        name: logindata
    LoginSuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, failure]
        description:
          type: string
        idtoken:
          type: string
        accesstoken:
          type: string
        refreshtoken:
          type: string
      xml:
        name: loginSuccessResponsedata
    LoginExtendSessionResponse:
      type: object
      properties:
        status:
          type: string
        description:
          type: string
        idtoken:
          type: string
        accesstoken:
          type: string
      xml:
        name: loginNewPasswdResponsedata
    LoginWithoutPassword:
      type: object
      properties:
        status:
          type: string
        description:
          type: string
        session:
          type: string
      xml:
        name: loginWithoutPasswdResponsedata
    GetUserResponse:
      type: object
      properties:
        user_id:
          type: string
        user_name:
          type: string
        super_admin:
          type: boolean
        picture_url:
          type: string
        name:
          type: string
        phone_number:
          type: string
        mfa:
          type: boolean
      xml:
        name: getUserResponsedata

    PasswordChangeRequest:
      type: object
      properties:
        password:
          type: string
          minimum: 8
          maximum: 256
        newpassword:
          type: string
          minimum: 8
          maximum: 256
    ForgotPasswordRequest:
      type: object
      properties:
        user_name:
          type: string
    ForgotPasswordConfirm:
      type: object
      properties:
        user_name:
          type: string
        password:
          type: string
          minimum: 8
          maximum: 256
        verification_code:
          type: string
          minimum: 6
          maximum: 6
    UpdateNameRequest:
      type: object
      properties:
        name:
          type: string
    UpdatePhoneNumberRequest:
      type: object
      properties:
        phone_number:
          type: string
    ConfirmPhoneNumberRequest:
      type: object
      properties:
        verification_code:
          type: string
    EnableOrDisableMFA:
      type: object
      properties:
        mfa:
          type: boolean
    GetNodesList:
      type: object
      properties:
        nodes:
          type: string
          example: '[ nodeid1, ... ]'
        node_details:
          $ref: "#/components/schemas/NodeDetails"
        next_id:
          type: string
          example: 'nodeid1'
        total:
          type: number
          example: 5
      xml:
        name: GetNodesListData
    GetAdminNodesList:
      type: object
      properties:
        nodes:
          type: array
          items:
            type: string
            example: node_id1
        node_info:
          type: array
          items:
            $ref: "#/components/schemas/NodeInfo"
        total:
          type: number
          example: 1
        next_id:
          type: string
          example: node_id1
      xml:
        name: GetNodesListData
    NodeInfo:
      type: object
      properties:
        node_id:
          type: string
          example: node_id1
        name:
          type: string
          minimum: 12
          maximum: 36
          example: Light
        fw_version:
          type: string
          example: "1.0"
        type:
          type: string
          example: Lightbulb
        model:
          type: string
          example: led_light
        registration_timestamp:
          type: string
          example: "2020-04-22 11:52:00"
        status:
          $ref: "#/components/schemas/NodeConnectivity"
    SetParamsRequestBody:
      type: object
      properties:
        Light:
          type: object
          properties:
            brightness:
              type: number
              minimum: 0
              maximum: 100
            output:
              type: boolean
              enum: [true, false]
        Switch:
          type: object
          properties:
            output:
              type: boolean
              enum: [true, false]

      xml:
        name: GetNodesListData

    SetMultiNodeParamsRequestBody:
      type: object
      properties:
        node_id:
          type: string
          example: '<node_id>'
        payload:
          $ref: "#/components/schemas/SetParamsRequestBody"

    SetMultiNodeParamsRequestsBody:
      type: array
      items:
        $ref: "#/components/schemas/SetMultiNodeParamsRequestBody"

    NodeConfiguration:
      type: object
      properties:
        node_id:
          type: string
          minimum: 12
          maximum: 36
          example: 'nodeid1'
        config_version:
          type: string
          example: 'config_version'
        devices:
          type: array
          items:
            $ref: "#/components/schemas/DeviceParameters"
        info:
          type: object
          properties:
            fw_version:
              type: string
              example: 'fw_version'
            name:
              type: string
              minimum: 12
              maximum: 36
              example: 'node_name'
            type:
              type: string
              example: 'node_type'
      xml:
        name: GetNodeConfiguration
    DeviceParameters:
      type: object
      description: Device parameters
      xml:
        name: DeviceParametersConfiguration
    NodeConnectivity:
      type: object
      properties:
        connectivity:
          type: object
          properties:
            connected:
              type: boolean
              enum: [true, false]
              example: true
            timestamp:
              type: integer
              minimum: 13
              maximum: 13
              example: 1584698464101
    AddRemoveUserNodeMappingRequest:
      type: object
      properties:
        node_id:
          type: string
          minimum: 12
          maximum: 36
        secret_key:
          type: string
          minimum: 1
        operation:
          type: string
          enum: [add, remove]
          description: operation can be add or remove
        location: 
           properties:
            city:
              type: string
              maximum: 500
              description: name of the city, locality or town
            state:
              type: string
              maximum: 500
              description: name of the province, state, department, region, county or parish
            country:
              type: string
              maximum: 500
              description: official name of the country
            postal_code:
              type: string
              maximum: 50
              description: postal code, postcode, PIN code, ZIP code or postal index of the area
            latitude:
              type: number
              minimum: -90.0
              maximum: 90
              description: latitude in decimal degrees
            longitude:
              type: number
              minimum: -180.0
              maximum: 180
              description: longitude in decimal degrees
            location_tag:
              type: string
              maximum: 100
              description: any custom information

    AddRemoveUserNodeSharingRequest:
      type: object
      properties:
        node_ids:
          type: array
          items:
            type: string
        user_name:
          type: string
        primary:
          type: boolean
        metadata:
          type: object
      required:
        - node_ids
        - user_name
    AcceptOrDeclineNodeSharingRequest:
      type: object
      properties:
        confirm_sharing:
          type: boolean
        request_id:
          type: string
        accept:
          type: boolean
      required:
        - accept
        - request_id
    GetUserNodeSharingResponse:
      type: object
      properties:
        node_sharing:
          type: array
          items:
            $ref: "#/components/schemas/UserNodeSharing"
    UserNodeSharing:
      type: object
      properties:
        node_id:
          type: string
        users:
          type: object
          properties:
            primary:
              type: array
              items:
                type: string
                example: "primary_user@domain.com"
            secondary:
              type: array
              items:
                type: string
                example: "secondary_user@domain.com"
        sources:
          type: array
          items:
            type: string
    OtaImageCreateRequest:
      type: object
      properties:
        fw_version:
          type: string
        image_name:
          type: string
        model:
          type: string
        type:
          type: string
        base64_fwimage:
          type: string
      required:
        - base64_fwimage
        - image_name
    OtaJobCreateRequest:
      type: object
      properties:
        ota_job_name:
          type: string
        groups:
          type: string
        nodes:
          type: string
        ota_image_id:
          type: string
        metadata:
          type: object
      required:
        - ota_job_name
        - ota_image_id
    OtaJobCancelRequest:
      type: object
      properties:
        ota_job_id:
          type: string
        archive:
          type: string
      required:
        - "ota_job_id"
    OtaImageCreateResponse:
      type: object
      properties:
        ota_image_id:
          type: string
        image_url:
          type: string
        status:
          type: string
    OtaJobCreateResponse:
      type: object
      properties:
        ota_job_id:
          type: string
        status:
          type: string
    OtaJobSummaryResponse:
      type: object
      properties:
        triggered:
          type: integer
        started:
          type: integer
        in_progress:
          type: integer
        rejected:
          type: integer
        success:
          type: integer
        failed:
          type: integer
        total:
          type: integer
    OtaJobNodeStatusResponse:
      type: object
      properties:
        node_ota_status:
          type: array
          items:
            $ref: "#/components/schemas/NodeOtaStatus"
        total:
          type: number
          example: 5
        node_groups:
          type: array
          items:
            $ref: "#/components/schemas/NodeGroup"
        next_id:
          type: string
          example: next_id
    NodeGroup:
      type: object
      properties:
        group_id:
          type: string
          example: shi8VjiQdKhkQkqBguXqK5
        group_name:
          type: string
          example: test_group_1
    NodeOtaStatus:
      type: object
      properties:
        node_id:
          type: string
          example: node_id
        status:
          type: string
          example: ota_status
        timestamp:
          type: string
          example: timestamp
        additional_info:
          type: string
          example: additional_info
    GetOTAImageResponse:
      type: object
      properties:
        ota_images:
          type: array
          items:
            $ref: "#/components/schemas/OTAImage"
        total:
          type: string
          example: total records available
        next_id:
          type: string
          example: id of the next record
    GetOTAJobResponse:
      type: object
      properties:
        ota_jobs:
          type: array
          items:
            $ref: "#/components/schemas/OTAJob"
        total:
          type: integer
          example: 0
        next_id:
          type: string
          example: id of the next record
        metadata:
          type: object
          example: {"download_window":{"start":0, "end":120}, "validity":{"start":1639732410, "end":1639991610}}
    OTAImage:
      type: object
      properties:
        ota_image_id:
          type: string
        image_name:
          type: string
        type:
          type: string
        model:
          type: string
        image_url:
          type: string
        fw_version:
          type: string
        upload_timestamp:
          type: number
        file_size:
          type: number
        file_md5:
          type: string
    OTAJob:
      type: object
      properties:
        ota_job_id:
          type: string
        ota_job_name:
          type: string
        ota_image_id:
          type: string
        completed_count:
          type: integer
        total_count:
          type: integer
        triggered_timestamp:
          type: string
        nodes:
          type: string
          example: ["node_id"]
        status:
          type: string
        archived:
          type: boolean
        metadata:
          type: object

    OTACancelJob:
      type: object
      properties:
        ota_job_id:
          type: string
        ota_job_name:
          type: string
        ota_image_id:
          type: string
        completed_count:
          type: integer
        total_count:
          type: integer
        triggered_timestamp:
          type: string
        cancelled_timestamp:
          type: string
        groups:
          type: string
          example: ["FFFF-FFFF"]
        status:
          type: string
        archived:
          type: boolean

    AddUserNodeMappingResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, failure]
        description:
          type: string
        request_id:
          type: string
    AddUserNodeMappingRequestStatus:
      type: object
      properties:
        request_status:
          type: string
          enum: [requested, confirmed, timedout, discarded]
          example: 'confirmed'

    NodeDetailsObject:
      type: object
      properties:
        id:
          type: string
          minimum: 12
          maximum: 36
          example: 'nodeid1'
        role:
          type: string
          enum: [primary, secondary]
          example: 'primary'
        status:
          $ref: "#/components/schemas/NodeConnectivity"
        config:
          $ref: "#/components/schemas/NodeConfiguration"
        params:
          $ref: "#/components/schemas/SetParamsRequestBody"

    NodeDetails:
      type: array
      items:
        $ref: "#/components/schemas/NodeDetailsObject"

    UserOTAImageRequest:
      type: object
      properties:
        type:
          type: string
        image_name:
          type: string
        base64_fwimage:
          type: string

    UserOTAImageResponse:
      type: object
      properties:
        image_url:
          type: string
        status:
          type: string

    UserOTAUpdateRequest:
      type: object
      properties:
        status:
          type: string
          example: success
        ota_available:
          type: boolean
        description:
          type: string
          example: "description"
        fw_version:
          type: string
          example: "1.0"
        ota_job_id:
          type: string
          example: ota_job_id
        file_size:
          type: number

    CreateDeviceGroupRequest:
      type: object
      properties:
        group_name:
          type: string
          minimum: 1
          maximum: 256
        parent_group_id:
          type: string
        type:
          type: string
        mutually_exclusive:
          type: boolean
        nodes:
          type: array
          items:
            type: string
        description:
          type: string
      required:
        - group_name

    CreateDeviceGroupRequestWithGroupQueryParams:
      type: object
      properties:
        group_name:
          type: string
          minimum: 1
          maximum: 256
        type:
          type: string
        node_fw_version:
          type: string
        node_model:
          type: string
        node_type:
          type: string
        description:
          type: string
      required:
        - group_name

    UpdateDeviceGroupRequest:
      type: object
      properties:
        group_name:
          type: string
        operation:
          type: string
        type:
          type: string
        mutually_exclusive:
          type: boolean
        nodes:
          type: array
          items:
            type: string
        description:
          type: string

    UpdateAdminDeviceGroupRequest:
      type: object
      properties:
        group_name:
          type: string
        operation:
          type: string
        type:
          type: string
        nodes:
          type: array
          items:
            type: string
        description:
          type: string
        regroup:
          type: boolean

    CreateDeviceGroupResponse:
      type: object
      properties:
        group_id:
          type: string
          example: "group_id"
        status:
          type: string
          example: "success"

    DeviceGroup:
      type: object
      properties:
        group_name:
          type: string
        group_id:
          type: string
        parent_group_id:
          type: string
        type:
          type: string
        nodes:
          type: array
          items:
            type: string
        node_details:
          items:
            $ref: "#/components/schemas/DeviceGroupNodeDetails"
        description:
          type: string
        group_query:
          type: string
        total:
          type: integer
        sub_groups:
          items:
            $ref: "#/components/schemas/DeviceGroup"
        next_id:
          type: string

    DeviceGroupNodeDetails:
      type: object
      properties:
        node_id:
          type: string
        name:
          type: string
        fw_version:
          type: string
        type:
          type: string
        model:
          type: string

    GetDeviceGroupResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: "#/components/schemas/DeviceGroup"
        total:
          type: integer
          example: total records available
        next_id:
          type: string
          example: next group id to get

    DeviceGroupAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    OTAImageAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    MqttEndpointAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '109XXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    UserNodeMappingAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    FetchMqttEndpointResponse:
      type: object
      properties:
        mqtt_host:
          type: string
          example: 'mqtt_host_endpoint'
      xml:
        name: APIFailureResponse

    UserNodeSharingAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '1XXXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    OTAJobAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'

    NodeStateAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    UserAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    SharingDetails:
      type: object
      properties:
        request_id:
          type: string
        request_status:
          type: string
        request_timestamp:
          type: number
        node_ids:
          type: array
          items:
            type: string
        user_name:
          type: string
        primary_user_name:
          type: string
        metadata:
          type: object
      required:
        - request_id
        - request_status
        - request_timestamp
        - node_ids
        - user_name
        - primary_user_name

    GetNodeSharingRequestResponse:
      type: object
      properties:
        sharing_requests:
          type: array
          items:
            $ref: "#/components/schemas/SharingDetails"
        next_request_id:
          type: string
        next_user_id:
          type: string

    UserLoginMobileRequest:
      type: object
      properties:
        user_name:
          type: string

    UserLoginMobileConfirmRequest:
      type: object
      properties:
        user_name:
          type: string
        verification_code:
          type: string
        session:
          type: string

    StatsCount:
      type: object
      properties:
        date:
          type: string
          example: "2021-02-23"
        start_date:
          type: string
          example: "2021-02-23"
        end_date:
          type: string
          example: "2021-02-23"
        month:
          type: string
          example: "March"
        year:
          type: string
          example: "2021"
        daily_count:
          type: number
        weekly_count:
          type: number
        monthly_count:
          type: number
        yearly_count:
          type: number

    StatsObject:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/StatsCount"
        total_count:
          type: number

    StatsAPISuccessResponse:
      type: object
      properties:
        num_registered_users:
            $ref: "#/components/schemas/StatsObject"
        num_registered_nodes:
            $ref: "#/components/schemas/StatsObject"
        num_users_with_nodes:
            $ref: "#/components/schemas/StatsObject"
        num_users_without_nodes:
            $ref: "#/components/schemas/StatsObject"
        num_timed_out_node_association_reqs:
            $ref: "#/components/schemas/StatsObject"
        num_claimed_nodes:
            $ref: "#/components/schemas/StatsObject"
        num_online_nodes:
            type: number
        num_offline_nodes:
            type: number

    StatsAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '1XXXXX'
        description:
          type: string
          example: 'Failure description'

    SharingGroupDetails:
      type: object
      properties:
        request_id:
          type: string
        request_status:
          type: string
        request_timestamp:
          type: number
        group_ids:
          type: array
          items:
            type: string
        user_name:
          type: string
        primary_user_name:
          type: string
        metadata:
          type: object
      required:
        - request_id
        - request_status
        - request_timestamp
        - group_ids
        - user_name
        - primary_user_name

    GetGroupSharingRequestResponse:
      type: object
      properties:
        sharing_requests:
          type: array
          items:
            $ref: "#/components/schemas/SharingGroupDetails"
        next_request_id:
          type: string
        next_user_id:
          type: string

    UserGroupSharingAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '1XXXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    AddUserGroupSharingRequest:
      type: object
      properties:
        groups:
          type: array
          items:
            type: string
        user_name:
          type: string
        primary:
          type: boolean
        metadata:
          type: object
      required:
        - group_ids
        - user_name

    GetUserGroupSharingResponse:
      type: object
      properties:
        group_sharing:
          type: array
          items:
            $ref: "#/components/schemas/UserGroupSharing"
    UserGroupSharing:
      type: object
      properties:
        group_id:
          type: string
        users:
          type: object
          properties:
            primary:
              type: array
              items:
                type: string
                example: "primary_user@domain.com"
            secondary:
              type: array
              items:
                type: string
                example: "secondary_user@domain.com"
        sub_groups:
          type: array
          items:
            $ref: "#/components/schemas/UserGroupSharing"

    UserPushOtaUpdateRequest:
      type: object
      properties:
        ota_job_id:
          type: string
          example: 'ota_job_id'
        node_id:
          type: string
          example: 'node_id'

    UserGetOtaStatusResponse:
      type: object
      properties:
        node_id:
          type: string
          example: 'node_id'
        status:
          type: string
          example: 'status'
        additional_info:
          type: string
          example: 'additional_info'
        timestamp:
          type: number
          example: 1584698464101

    GCMPlatformApplicationCreateRequest:
      type: object
      properties:
        platform:
          type: string
        api_key:
          type: string

    APNSPlatformApplicationCreateRequest:
      type: object
      properties:
        platform:
          type: string
        ssl_certificate:
          type: string
        private_key:
          type: string

    PlatformApplicationAPISuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        platform_application_arn:
          type: string
          example: 'platform application arn'
      xml:
        name: PlatformApplicationAPISuccessResponse

    PlatformApplication:
      type: object
      properties:
        platform_application_arn:
          type: string
          example: 'platform application arn'

    PlatformApplicationAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '1XXXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    GetPlatformApplicationResponse:
      type: object
      properties:
        platform_applications:
          items:
            $ref: "#/components/schemas/PlatformApplication"

    PlatformEndpointCreateRequest:
      type: object
      properties:
        platform_application_name:
          type: string
        mobile_device_token:
          type: string

    PlatformEndpointAPISuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        platform_endpoint_arn:
          type: string
          example: 'platform endpoint arn'
      xml:
        name: PlatformEndpointAPISuccessResponse

    PlatformEndpoint:
      type: object
      properties:
        mobile_device_token:
          type: string
          example: 'mobile device token'
        platform_endpoint_arn:
          type: string
          example: 'platform endpoint arn'
        platform_application_arn:
          type: string
          example: 'platform application arn '

    GetPlatformEndpointResponse:
      type: object
      properties:
        platform_endpoints:
          items:
            $ref: "#/components/schemas/PlatformEndpoint"

    PublishMessage:
      type: object
      properties:
        message_title:
          type: string
          example: 'Message title'
        message_body:
          type: string
          example: 'Message body'

    CreateCustomMobileMessageTemplate:
      type: object
      properties:
        event_type:
          type: string
          example: 'Event type'
        message_title:
          type: string
          example: 'Message title'
        message_body:
          type: string
          example: 'Message body'
        event_data:
          type: string
          example: 'enable/disable'

    GetCustomMobileMessageTemplateResponse:
      type: object
      properties:
        custom_message_templates:
          items:
            $ref: "#/components/schemas/CreateCustomMobileMessageTemplate"

    AddWebhookIntegrationRequest:
      type: object
      properties:
        service_name:
          type: string
        endpoint_name:
          type: string
        enabled:
          type: boolean # by default this is true optional parameter
      xml:
        name: webhookIntegrationData

    UpdateWebhookIntegrationRequest:
      type: object
      properties:
        service_name:
          type: string
        endpoint_name:
          type: string
        enabled:
          type: boolean # by default this is true optional parameter
      xml:
        name: webhookIntegrationData

    WebhookIntegration:
      type: object
      properties:
        service_name:
          type: string
          example: gva
        endpoint_name:
          type: string
          minimum: 1
          maximum: 256
          example: "request_sync"
        enabled:
          type: boolean
          example: true

    GetWebhookIntegrationResponse:
      type: object
      properties:
        webhooks_endpoints:
          type: array
          items:
            $ref: '#/components/schemas/WebhookIntegration'
        total:
          type: number
          example: 1

    WebhookIntegrationAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '113XXX' # update error code prefix
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    CreateEventFilterRequest:
      type: object
      properties:
        event_type:
          type: string
          example: 'rmaker.event.user_node_added'
        entity_id:
          type: string
          example: '56d76757-2609-48bc-bbf5-2e4c6f0723e0'
        entity_type:
          type: string
          example: 'User/Node/System'
        enabled:
          type: boolean
          example: false
        enabled_for_integrations:
          type: array
          items:
            type: string
          example: ['google_home_graph', 'salesforce']

    UpdateEventFilterRequest:
      type: object
      properties:
        event_type:
          type: string
          example: 'rmaker.event.user_node_added'
        entity_id:
          type: string
          example: '56d76757-2609-48bc-bbf5-2e4c6f0723e0'
        entity_type:
          type: string
          example: 'User/Node/System'
        enabled_for_integrations:
          type: array
          items:
            type: string
          example: ['google_home_graph', 'salesforce']

    EventFilter:
      type: object
      properties:
        event_type:
          type: string
          example: 'rmaker.event.user_node_added'
        entitiy_id:
          type: string
          example: '56d76757-2609-48bc-bbf5-2e4c6f0723e0'
        entity_type:
          type: string
          example: 'User/Node/System'
        enabled:
          type: boolean
          example: false
        enabled_for_integrations:
          type: array
          items:
            type: string
          example: ["google_home_graph", "salesforce"]

    GetEventFilterResponse:
      type: object
      properties:
        webhooks_endpoints:
          type: array
          items:
            $ref: '#/components/schemas/EventFilter'
        total:
          type: number
          example: 1

    EventFilterAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '1131XX'
        description:
          type: string
          example: 'Failure description'

    WebhookAPISuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'

    GetSystemEventFilter:
      type: object
      properties:
        lambda_function:
          type: string
          example: 'esp-ConnectionNode'
        env_variables:
          type: object
          properties:
            event_types:
              type: array
              items:
                type: string
                example: 'rmaker.event.user_node_added'

    GetSystemEventFilterResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetSystemEventFilter'

    UpdateSystemEventFilterRequest:
      type: object
      properties:
        event_types:
          type: array
          items:
            $ref: '#/components/schemas/PutSystemEventFilter'
        enabled:
          type: boolean
          example: true

    PutSystemEventFilter:
      type: string
      example: 'rmaker.event.user_node_added'

    SystemEventFilterAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '1XXXXX'
        description:
          type: string
          example: 'Failure description'

    ServerErrorAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '5XX'
        description:
          type: string
          example: 'Failure description'

    GetWebhookEventMappingResponse:
      type: object
      properties:
        webhook_event_mappings:
          type: array
          items:
            $ref: '#/components/schemas/WebhookEventMapping'

    WebhookEventMapping:
      type: object
      properties:
        webhook_name:
          type: string
          example: gva
        event_name:
          type: string
          example: user_node_association

    PutWebhookEventMappingRequest:
      type: object
      properties:
        webhook_name:
          type: string
          example: 'gva'
        event_name:
          type: string
          example: 'user_node_association'

    GetWebhookUserNodeIntegrationResponse:
      type: object
      properties:
        webhook_user_node_integrations:
          type: array
          items:
            $ref: '#/components/schemas/WebhookUserNodeIntegration'

    WebhookUserNodeIntegration:
      type: object
      properties:
        webhook_name:
          type: string
          example: 'test_webhook212'
        enabled:
          type: boolean
          example: true
        nodes_list:
          type: array
          items:
            $ref: '#/components/schemas/NodesList'
        events:
          type: array
          items:
            $ref: '#/components/schemas/WebhookUserNodeIntegrationEvents'
        active_timestamp:
          type: integer
          example: 1626684122

    NodesList:
      type: string
      example: asd

    WebhookUserNodeIntegrationEvents:
      type: object
      properties:
        event_name:
          type: string
          example: test_event
        event_active_timestamp:
          type: integer
          example: 1626684122


    TSCount:
      type: object
      properties:
        ts:
          type: number
          example: 1577836800
        val:
          type: number
          example: 30.43

    TSMeasureObject:
      type: object
      properties:
        param_name:
            type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/TSCount"

    TSAPINodeSuccessResponse:
      type: object
      properties:
        node_id:
            type: string
        params:
          type: array
          items:
            $ref: "#/components/schemas/TSMeasureObject"
        next_id:
            type: string
        aggregate:
            type: string
            example: max
        interval:
            type: string
            example: day
        week_start:
            type: string
            example: Monday

    TSAPISuccessResponse:
      type: object
      properties:
        ts_data:
          type: array
          items:
            $ref: "#/components/schemas/TSAPINodeSuccessResponse"

    TSAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '1XXXXX'
        description:
          type: string
          example: 'Failure description'

    UserDataRequestResponse:
      type: object
      properties:
        user_data:
          type: object
          example: { key : value }
        write_once_user_data:
          type: object
          example: { key : value }

    UserDataResponse:
      type: object
      properties:
        user_data:
          type: object
          example: { key : value }
        write_once_user_data:
          type: object
          example: { key : value }
        admin_controlled_data:
          type: object
          example: { key : value }

    AutomationTriggerAPISuccessResponse:
      type: object
      properties:
        automation_id:
          type: string
          example: '<automation_id>'
        status:
          type: string
          example: 'success'
      xml:
        name: automationTriggerAPISuccessResponse

    AddAutomationTriggerRequest:
      type: object
      properties:
        name:
          type: string
        node_id:
          type: string
        event_type:
          type: string
        metadata:
          type: object
        events:
          type: array
          items:
            type: object
            properties:
              params:
                type: object
              check:
                type: string
        event_operator:
          type: string
        actions:
          type: array
          items:
            type: object
            properties:
              node_id:
                type: string
              params:
                type: object
      xml:
        name: addAutomationTriggerData

    UpdateAutomationTriggerRequest:
      type: object
      properties:
        active:
          type: boolean
        conditions:
          type: array
          items:
            type: object
            properties:
              value:
                type: object
              check:
                type: string
        action:
          type: array
          items:
            type: object
            properties:
              node_id:
                type: string
              payload:
                type: object
      xml:
        name: updateAutomationTriggerData

    AutomationTrigger:
      type: object
      properties:
        name:
          type: string
          example: '<automation_name>'
        automation_id:
          type: string
          example: '<automation_id>'
        enabled:
          type: boolean
          example: true
        node_id:
          type: string
          example: '<node_id1>'
        event_type:
          type: string
          example: '<event_type>'
        metadata:
          type: string
          example: '<metadata>'
        events:
          type: array
          items:
            type: object
            properties:
              params:
                type: object
              check:
                type: string
        event_operator:
          type: string
        actions:
          type: array
          items:
            type: object
            properties:
              node_id:
                type: string
              params:
                type: object

    GetAutomationTriggerResponse:
      type: object
      properties:
        automation_trigger_actions:
          type: array
          items:
            $ref: '#/components/schemas/AutomationTrigger'
        total:
          type: number
          example: 1
        next_id:
          type: string
          example: '<automationid1>'

    AutomationTriggerAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '11XXXX' # update error code prefix
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

  examples:
    GetDeviceGroupResponse:
      value:
        groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          nodes: ["node1","node2"],
          total: <nodes_count>,
          sub_groups: [{
            group_name: group_name,
            group_id: group_id,
            parent_group_id: parent_group_id,
            type: type_metadata,
            nodes: ["node1"],
            sub_groups: null,
            total: <nodes_count>,
            description: description
          }],
          description: description
          }]
        total: <groups_count>
        next_id: <next group id>

    GetDeviceGroupWithoutNodesListResponse:
      value:
        groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          total: <nodes_count>,
          sub_groups: [{
            group_name: group_name,
            group_id: group_id,
            parent_group_id: parent_group_id,
            type: type_metadata,
            sub_groups: null,
            total: <nodes_count>,
            description: description
          }],
          description: description
          }
        ]
        total: <groups_count>
        next_id: <next group id>

    GetDeviceGroupWithoutNodesListResponseGroupID:
      value:
        groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          total: <nodes_count>,
          sub_groups: [{
            group_name: group_name,
            group_id: group_id,
            parent_group_id: parent_group_id,
            type: type_metadata,
            sub_groups: null,
            total: <nodes_count>,
            description: description
          }
         ],
         description: description}
        ]

    GetDeviceGroupNodeList:
      value:
        groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          nodes: ["node1","node2"],
          total: <nodes_count>,
          description: description
          }
        ]
        total: <groups_count>
        next_id: <next group id>

    GetDeviceGroupBase:
      value:
        groups: [{
            group_name: group_name,
            group_id: group_id,
            type: type_metadata,
            total: <nodes_count>,
            description: description
          }
        ]
        total: <groups_count>
        next_id: <next group id>

    GetDeviceGroupResponseGroupID:
      value:
        groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          nodes: ["node1","node2"],
          total: <nodes_count>,
          sub_groups: [{
            "group_name": group_name,
            "group_id": group_id,
            "parent_group_id": parent_group_id,
            "type": type_metadata,
            "nodes": ["node1"],
            total: <nodes_count>,
            "sub_groups":null,
            description: description
          }],
          description: description
          }]

    GetDeviceGroupNodeListGroupID:
      value:
        groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          nodes: ["node1","node2"],
          total: <nodes_count>,
          description: description
          }]

    GetDeviceGroupBaseGroupID:
      value:
        groups: [{
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          total: <nodes_count>,
          description: description
          }
        ]

    GetDeviceGroupResponseGroupName:
      value:
        [
          {
            groups: [
            {
            group_name: group_name,
            group_id: group_id,
            type: type_metadata,
            nodes: ["node1","node2"],
            total: <nodes_count>,
            sub_groups: [{
              "group_name": group_name,
              "group_id": group_id,
              "parent_group_id": parent_group_id,
              "type": type_metadata,
              "nodes": ["node1"],
              total: <nodes_count>,
              "sub_groups":null,
              description: description
            }],
            description: description
            }]
          }
        ]

    GetDeviceGroupNodeListGroupName:
      value:
        [{
          groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          nodes: ["node1","node2"],
          total: <nodes_count>,
          description: description
          }]
        }]
    GetDeviceGroupWithoutNodesListResponseGroupName:
      value:
        [{
          groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          total: <nodes_count>,
          sub_groups: [{
            group_name: group_name,
            group_id: group_id,
            parent_group_id: parent_group_id,
            type: type_metadata,
            sub_groups: null,
            total: <nodes_count>,
            description: description
          }],
          description: description}
          ]
        }]
    GetDeviceGroupBaseGroupName:
      value:
        [{
          groups: [{
            group_name: group_name,
            group_id: group_id,
            type: type_metadata,
            total: <nodes_count>,
            description: description
          }
            ]
        }]

    GetNodeGroupByNameArrayWithNodeDetails:
      value:
        [{
          groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          node_details: [
            {
              node_id: string,
              name: string,
              fw_version: string,
              type: string,
              model: string
            }
          ],
          total: <nodes_count>,
          sub_groups: [{
            "group_name": group_name,
            "group_id": group_id,
            "parent_group_id": parent_group_id,
            "type": type_metadata,
              node_details: [
              {
                node_id: string,
                name: string,
                fw_version: string,
                type: string,
                model: string
              }
            ],
            total: <nodes_count>,
            "sub_groups":null,
            description: description
          }],
          description: description
          }]
        }]

    GetNodeGroupByNameArrayWithNodeDetailsWithoutSubGroups:
      value:
        [{
          groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          node_details: [
            {
              node_id: string,
              name: string,
              fw_version: string,
              type: string,
              model: string
            }
          ],
          total: <nodes_count>,
          description: description
          }]
        }]

    StatsWeeklyData:
      value:
        {
            num_registered_users: {
                data: [
                    {
                        weekly_count: 17740,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 18233,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 79811
            },
            num_registered_nodes: {
                data: [
                    {
                        weekly_count: 18066,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 19007,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 82834
            },
            num_users_with_nodes: {
                data: [
                    {
                        weekly_count: 18984,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 18591,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 83970
            },
            num_users_without_nodes: {
                data: [
                    {
                        weekly_count: 18857,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 17828,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 81631
            },
            num_timed_out_node_association_reqs: {
                data: [
                    {
                        weekly_count: 18848,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 18782,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 82967
            },
            num_claimed_nodes: {
                data: [
                    {
                        weekly_count: 18586,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 18565,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 82560
            },
            num_online_nodes: 10,
            num_offline_nodes: 12
        }

    StatsDailyData:
      value:
        {
            num_registered_users: {
                data: [
                    {
                        daily_count: 2660,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2576,
                        date: "2021-03-04"
                    }
                ],
                total_count: 79811
            },
            num_registered_nodes: {
                data: [
                    {
                        daily_count: 2763,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2466,
                        date: "2021-03-04"
                    }
                ],
                total_count: 82834
            },
            num_users_with_nodes: {
                data: [
                    {
                        daily_count: 2774,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2572,
                        date: "2021-03-04"
                    }
                ],
                total_count: 83970
            },
            num_users_without_nodes: {
                data: [
                    {
                        daily_count: 2515,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2232,
                        date: "2021-03-04"
                    }
                ],
                total_count: 81631
            },
            num_timed_out_node_association_reqs: {
                data: [
                    {
                        daily_count: 2775,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2544,
                        date: "2021-03-04"
                    }
                ],
                total_count: 82967
            },
            num_claimed_nodes: {
                data: [
                    {
                        daily_count: 2908,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2710,
                        date: "2021-03-04"
                    }
                ],
                total_count: 82560
            },
            num_online_nodes: 10,
            num_offline_nodes: 12
        }

    StatsMonthlyData:
      value:
        {
          num_registered_users: {
              data: [
                  {
                      monthly_count: 47109,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 32702,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 79811
          },
          num_registered_nodes: {
              data: [
                  {
                      monthly_count: 47730,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 35104,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 82834
          },
          num_users_with_nodes: {
              data: [
                  {
                      monthly_count: 48673,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 35297,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 83970
          },
          num_users_without_nodes: {
              data: [
                  {
                      monthly_count: 47589,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 34042,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 81631
          },
          num_timed_out_node_association_reqs: {
              data: [
                  {
                      monthly_count: 47911,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 35056,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 82967
          },
          num_claimed_nodes: {
              data: [
                  {
                      monthly_count: 47466,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 35094,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 82560
          },
          num_online_nodes: 10,
          num_offline_nodes: 12
      }

    StatsYearlyData:
      value:
        {
            num_registered_users: {
                data: [
                    {
                        yearly_count: 79811,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 79811
            },
            num_registered_nodes: {
                data: [
                    {
                        yearly_count: 82834,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 82834
            },
            num_users_with_nodes: {
                data: [
                    {
                        yearly_count: 83970,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 83970
            },
            num_users_without_nodes: {
                data: [
                    {
                        yearly_count: 81631,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 81631
            },
            num_timed_out_node_association_reqs: {
                data: [
                    {
                        yearly_count: 82967,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 82967
            },
            num_claimed_nodes: {
                data: [
                    {
                        yearly_count: 82560,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 82560
            },
            num_online_nodes: 10,
            num_offline_nodes: 12
        }

    StatsDefaultData:
      value:
        {
            num_registered_users: {
                total_count: 79811
            },
            num_registered_nodes: {
                total_count: 82834
            },
            num_users_with_nodes: {
                total_count: 83970
            },
            num_users_without_nodes: {
                total_count: 81631
            },
            num_timed_out_node_association_reqs: {
                total_count: 82967
            },
            num_claimed_nodes: {
                total_count: 82560
            },
            num_online_nodes: 10,
            num_offline_nodes: 12
        }

    GetOTAImageArrayResponse:
      value:
        {
          ota_images: [
            {
              ota_image_id: string,
              image_name: string,
              type: string,
              model: string,
              image_url: string,
              fw_version: string,
              upload_timestamp: 0,
              file_size: 0,
              file_md5: string,
              archived: bool
            }
          ],
          total: total records available,
          next_id: id of the next record
        }

    GetOTAImageResponseByImageId:
      value:
        {
          ota_image_id: string,
          image_name: string,
          type: string,
          model: string,
          image_url: string,
          fw_version: string,
          upload_timestamp: 0,
          file_size: 0,
          file_md5: string,
          archived: bool
        }

    GetOTAJobs:
      value:
        {
          ota_jobs: [
            {
              ota_job_id: string,
              ota_job_name: string,
              ota_image_id: string,
              completed_count: 0,
              total_count: 0,
              triggered_timestamp: string,
              nodes: [
                node_id
              ],
              status: string,
              metadata: {"download_window":{"start":0, "end":120}, "validity":{"start":1639732410, "end":1639991610}}
            }
          ],
          total: 0,
          next_id: id of the next record
        }
    GetOTAJob:
      value:
        {
          ota_job_id: string,
          ota_job_name: string,
          ota_image_id: string,
          completed_count: 0,
          total_count: 0,
          triggered_timestamp: string,
          nodes: [
            node_id
          ],
          status: string,
          archived: true,
          metadata: {"download_window":{"start":0, "end":120}, "validity":{"start":1639732410, "end":1639991610}}
        }

    GetArchivedOTAJobs:
      value:
        {
          ota_jobs: [
            {
              ota_job_id: string,
              ota_job_name: string,
              ota_image_id: string,
              completed_count: 0,
              total_count: 0,
              triggered_timestamp: string,
              nodes: [
                node_id
              ],
              status: string,
              archived: true,
               metadata: {"download_window":{"start":0, "end":120}, "validity":{"start":1639732410, "end":1639991610}}
            }
          ],
          total: 0,
          next_id: id of the next record
        }

    GetNodeGroupByIdArrayWithNodeDetails:
      value:
        groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          node_details: [
            {
              node_id: string,
              name: string,
              fw_version: string,
              type: string,
              model: string
            }
          ],
          total: <nodes_count>,
          sub_groups: [{
            "group_name": group_name,
            "group_id": group_id,
            "parent_group_id": parent_group_id,
            "type": type_metadata,
              node_details: [
              {
                node_id: string,
                name: string,
                fw_version: string,
                type: string,
                model: string
              }
            ],
            total: <nodes_count>,
            "sub_groups":null,
            description: description
          }],
          description: description
          }
         ]

    GetNodeGroupByIdWithNodeDetails:
      value:
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        node_details: [
          {
            node_id: string,
            name: string,
            fw_version: string,
            type: string,
            model: string
          }
        ],
        total: <nodes_count>,
        sub_groups: [{
          group_name: group_name,
          group_id: group_id,
          parent_group_id: parent_group_id,
          type: type_metadata,
          sub_groups: null,
          total: <nodes_count>,
          description: description
         }],
         description: description,
         next_id: <next node id>
         }

    GetNodeGroupByIdArrayWithNodeDetailsWithoutSubGroups:
      value:
        groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          node_details: [
            {
              node_id: string,
              name: string,
              fw_version: string,
              type: string,
              model: string
            }
          ],
          total: <nodes_count>,
          description: description
          }]

    GetNodeGroupByIdWithNodesAndSubgroups:
      value:
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        nodes: ["node1","node2"],
        total: <nodes_count>,
         sub_groups: [{
          group_name: group_name,
          group_id: group_id,
          parent_group_id: parent_group_id,
          type: type_metadata,
          sub_groups: null,
          total: <nodes_count>,
          description: description
         }],
         description: description,
         next_id: <next node id>
         }
    GetNodeGroupByNameWithNodeDetails:
      value:
        [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          node_details: [
            {
              node_id: string,
              name: string,
              fw_version: string,
              type: string,
              model: string
            }
          ],
          total: <nodes_count>,
          sub_groups: [{
            group_name: group_name,
            group_id: group_id,
            parent_group_id: parent_group_id,
            type: type_metadata,
            sub_groups: null,
            total: <nodes_count>,
            description: description
          }],
          description: description,
          next_id: <next node id>
          }
        ]

    GetNodeGroupByNameWithNodesAndSubgroups:
      value:
        [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          nodes: ["node1","node2"],
          total: <nodes_count>,
          sub_groups: [{
            group_name: group_name,
            group_id: group_id,
            parent_group_id: parent_group_id,
            type: type_metadata,
            sub_groups: null,
            total: <nodes_count>,
            description: description
          }],
          description: description,
          next_id: <next node id>
          }
        ]

    GetNodeGroupByIdWithNodesAndAllGroupQuery:
      value:
        {
        group_id: group_id,
        group_name: group_name,
        type: type_metadata,
        nodes: ["node1","node2"],
        total: <nodes_count>,
        description: description,
        group_query: "node_type: <node_type> && node_model: <node_model> && node_fw_version: <node_fw_version>",
        next_id: <next node id>
        }

    GetNodeGroupByIdWithNodesAndOneGroupQuery:
      value:
        {
        group_id: group_id,
        group_name: group_name,
        type: type_metadata,
        nodes: ["node1","node2"],
        total: <nodes_count>,
        description: description,
        group_query: "node_model: <node_model>",
        next_id: <next node id>
        }

    GetNodeGroupByIdWithNodesAndTwoGroupQuery:
      value:
        {
        group_id: group_id,
        group_name: group_name,
        type: type_metadata,
        nodes: ["node1","node2"],
        total: <nodes_count>,
        description: description,
        group_query: "node_type: <node_type> && node_model: <node_model>",
        next_id: <next node id>
        }

    GetNodeGroupByNameWithNodesAndAllGroupQuery:
      value:
        [
          {
          group_id: group_id,
          group_name: group_name,
          type: type_metadata,
          nodes: ["node1","node2"],
          total: <nodes_count>,
          description: description,
          group_query: "node_type: <node_type> && node_model: <node_model> && node_fw_version: <node_fw_version>",
          next_id: <next node id>
          }
        ]

    GetDeviceGroupNodeListByNodeTypeNodeModel:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        description: description,
        group_query: "node_type: <node_type> && node_model: <node_model>",
        }]
        total: <groups_count>
        next_id: <next group id>

    GetDeviceGroupNodeListByNodeTypeNodeModelNodeFWVersion:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        description: description,
        group_query: "node_type: <node_type> && node_model: <node_model> && node_fw_version: <node_fw_version>"
        }]
        total: <groups_count>
        next_id: <next group id>

    MultiNodesSetParamsRequestBodyExample:
      value:
        [{
           node_id: string,
           payload: {
             Light: {
               brightness: 100,
               output: true
             },
             Switch: {
               output: true
             }
           }
         },{
           node_id: string,
           payload: {
             Light: {
               brightness: 100,
               output: true
             },
             Switch: {
               output: true
             }
           }
         }]
    SingleNodesSetParamsRequestBodyExample:
      value:
        [{
           node_id: string,
           payload: {
             Light: {
               brightness: 100,
               output: true
             },
             Switch: {
               output: true
             }
           }
         }]
    SingleNodesSetParamsRequestBodyWithNodeIdAsQueryParamExample:
      value:
        [{
           payload: {
             Light: {
               brightness: 100,
               output: true
             },
             Switch: {
               output: true
             }
           }
         }]
    UserDataResponseExample:
      value:
        {
          user_data: {
          Country: <country>,
          Language: <language>,
          Time Zone: UTC,
          Last Active Date: yyyy-mm-dd,
          Beta: false
          },
          write_once_user_data: {
          Birthday: yyyy-mm-dd
          },
          admin_controlled_data: {
          Premium membership: true
          }
        }
    AutomationTriggerRequestBodyExample:
      value:
        name: <automation_name>
        node_id: <node_id>
        event_type: <node_params>
        metadata: <metadata>
        events:
          - params:
              Light:
                Brightness: 100
            check: '='
        event_operator: and
        actions:
          - node_id: <node_id>
            params: {
              Light: {
                Output: true
              }
            }
    AutomationTriggerUpdateRequestBodyExample:
      value:
        name: <automation_name>
        enabled: false
        events:
          - params:
              Light:
                Brightness: 100
            check: '='
        event_operator: and
        actions:
          - node_id: <node_id>
            params: {
              Light:  {
                Output: true
              }
            }
